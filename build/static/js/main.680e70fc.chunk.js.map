{"version":3,"sources":["snake.js","Panel.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Snake","snake","this","props","body","some","cord","_","isEqual","head","tail","_this","running","setInterval","direction","y","x","clearInterval","selfCollide","lives","alive","alert","revive","newCell","push","splice","changeDirection","speed","_this2","react_default","a","createElement","id","react_keyboard_event_handler_default","handleKeys","onKeyEvent","key","e","endGame","run","React","Component","Panel","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","className","currentscore","record","onClick","speedDown","speedUp","Board","state","food","livefood","livefoodeaten","ctx","strokeStyle","fillStyle","fillRect","vertical","boardSize","beginPath","moveTo","lineTo","stroke","horizontal","_this$state","forEach","canvas","refs","gameBoard","setState","getContext","drawGrid","drawSnake","drawFood","newState","assign","canvasMoveSnake","_this$state2","drawRect","addBody","addscore","addlive","drawGrid2","l","h","drawBoard","display","_this$state3","position","Math","floor","random","exists","drawliveFood","_this$state4","foodeaten","i","newTail","temp","length","ref","width","height","style","left","top","resetBoard","src_snake","bind","src_Panel","App","document","title","src_Board","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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F,KAAKkF,SAAS,GAAG,GAAG,EAAE,GACtBlF,KAAKkF,SAAS,GAAG,EAAE,EAAE,GACrBlF,KAAKkF,SAAS,GAAG,GAAG,EAAE,GACtBlF,KAAKkF,SAAS,GAAG,GAAG,EAAE,GACtBlF,KAAKkF,SAAS,EAAE,GAAG,EAAE,GACrBlF,KAAKkF,SAAS,EAAE,GAAG,EAAE,GACrBlF,KAAKkF,SAAS,GAAG,GAAG,EAAE,GACtBlF,KAAKkF,SAAS,GAAG,GAAG,EAAE,GACtBlF,KAAKkF,SAAS,GAAG,GAAG,EAAE,GACtBlF,KAAKkF,SAAS,GAAG,GAAG,EAAE,GACtBlF,KAAKkF,SAAS,GAAG,GAAG,EAAE,GACtBlF,KAAKkF,SAAS,GAAG,GAAG,EAAE,GAEtBlF,KAAKkF,SAAS,EAAE,GAAG,EAAE,GACrBlF,KAAKkF,SAAS,GAAG,GAAG,EAAE,GACtBlF,KAAKkF,SAAS,GAAG,GAAG,EAAE,GACtBlF,KAAKkF,SAAS,GAAG,EAAE,EAAE,GACrBlF,KAAKkF,SAAS,GAAG,EAAE,EAAE,GACrBlF,KAAKkF,SAAS,GAAG,EAAE,EAAE,GACrBlF,KAAKkF,SAAS,EAAE,GAAG,EAAE,GACrBlF,KAAKkF,SAAS,EAAE,GAAG,EAAE,GACrBlF,KAAKkF,SAAS,GAAG,GAAG,EAAE,GACtBlF,KAAKkF,SAAS,GAAG,GAAG,EAAE,GACtBlF,KAAKkF,SAAS,GAAG,GAAG,EAAE,GACtBlF,KAAKkF,SAAS,GAAG,GAAG,EAAE,GACtBlF,KAAKkF,SAAS,GAAG,GAAG,EAAE,GAEtBlF,KAAKkF,SAAS,EAAE,GAAG,EAAE,GACrBlF,KAAKkF,SAAS,EAAE,GAAG,EAAE,GACrBlF,KAAKkF,SAAS,GAAG,GAAG,EAAE,GACtBlF,KAAKkF,SAAS,GAAG,GAAG,EAAE,GACtBlF,KAAKkF,SAAS,GAAG,GAAG,EAAE,GACtBlF,KAAKkF,SAAS,GAAG,GAAG,EAAE,GACtBlF,KAAKkF,SAAS,GAAG,GAAG,EAAE,GACtBlF,KAAKkF,SAAS,GAAG,GAAG,EAAE,GACtBlF,KAAKkF,SAAS,GAAG,GAAG,EAAE,wCAGZ,IACHnF,EAA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","file":"static/js/main.680e70fc.chunk.js","sourcesContent":["import React from 'react';\nimport KeyboardEventHandler from 'react-keyboard-event-handler'\nimport _ from 'lodash'\n\nclass Snake extends React.Component{\n    selfCollide() {\n      const snake = this.props.snake;\n      return snake.body.some(cord => _.isEqual(cord, snake.head)) || _.isEqual(snake.head, snake.tail)\n    }\n    run() {\n        this.props.snake.running = true;\n        var running = setInterval(() => {\n            const snake = this.props.snake;\n            switch(snake.direction){\n                case 'up':\n                  snake.head.y -= 1;\n                  break;\n                case 'down':\n                  snake.head.y += 1;\n                  break;\n                case 'left':\n                  snake.head.x -= 1;\n                  break;\n                case 'right':\n                  snake.head.x += 1;\n                  break;\n                default:\n                break;\n            }\n            if(this.props.snake.running === false){\n                clearInterval(running);\n            }\n            if (snake.head.x > 29 || snake.head.y > 29 || snake.head.x < 0 || snake.head.y < 0 || this.selfCollide()) {\n              snake.lives -= 1;\n              if (snake.lives <= 0) {\n                snake.running = false;\n                snake.alive = false;\n                clearInterval(running);\n              } else {\n                alert(\"Revived. You have \" + snake.lives + \" lives remaining :)\");\n                this.props.revive();\n              }\n            }\n            var newCell = {\n              x: snake.head.x,\n              y: snake.head.y\n            }\n            snake.body.push(newCell);\n            snake.tail.x = snake.body[0].x;\n            snake.tail.y = snake.body[0].y;\n            snake.body.splice(0,1);\n            this.props.changeDirection(snake.direction);\n        }, 200 / this.props.snake.speed);\n      }\n\n    render(){\n       return(\n           <div id=\"Snake\">\n            <KeyboardEventHandler\n                  handleKeys={['left', 'up', 'right', 'down', 'w', 's', 'a', 'd']}\n                  onKeyEvent={(key, e) => {\n                    if ((key === 'up' || key === 'w') && (this.props.snake.direction === 'down' || this.props.snake.direction === 'up')) {\n                      return;\n                    }\n                    if ((key === 'down' || key === 's') && (this.props.snake.direction === 'down' || this.props.snake.direction === 'up')) {\n                      return;\n                    }\n                    if ((key === 'left' || key === 'a') && (this.props.snake.direction === 'left' || this.props.snake.direction === 'right')) {\n                      return;\n                    }\n                    if ((key === 'right' || key === 'd') && (this.props.snake.direction === 'left' || this.props.snake.direction === 'right')) {\n                      return;\n                    }\n                    if (this.props.snake.alive === false && this.props.snake.running === false){\n                        this.props.endGame();\n                    }\n                    if (!this.props.snake.running && this.props.snake.alive){\n                        this.run();\n                    }\n                    this.props.changeDirection(key);\n                  }}/>\n           </div>\n       );\n   }\n}\n\nexport default Snake;","import React from 'react';\n\nclass Panel extends React.Component{\n\n    constructor(props){\n        super(props);\n      }\n\n    render(){\n        return (\n            <div className=\"Panel\">\n                <div className=\"Panel-Title\">\n                    <p>SNAKE</p>\n                </div>\n                <div className=\"Panel-Box\">\n                    <p>Score: {this.props.snake.currentscore}</p>\n                    <p>Life: {this.props.snake.lives}</p>\n                    <p>Record: {this.props.snake.record}</p>\n                </div>\n                <div className=\"Panel-Box\">\n                    <p>Speed: {this.props.snake.speed}</p>\n                    <button className = \"Panel-button\"\n                    onClick={this.props.speedDown}>-</button>\n                    <button className = \"Panel-button\"\n                    onClick={this.props.speedUp}>+</button>\n                </div>\n                <div className=\"Panel-Instruction\">\n                    <p className=\"Panel-Centered\"> Instruction & Shortcuts</p>\n                    <p>- ARROW keys / WSAD: direction</p>\n                    <p>- [ / ]: decrease / increase speed</p>\n                    <p>- SPACE: pause</p>\n                    <p>- R: restart</p>\n                    <p>- ESC: terminate</p>\n                    <p>- Eat pink food to earn more lives</p>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Panel;","import React from 'react';\nimport Snake from './snake';\nimport Panel from './Panel';\nimport './Panel.css';\nimport KeyboardEventHandler from 'react-keyboard-event-handler';\nimport { isAbsolute } from 'path';\nconst boardSize = 720;\nconst cellSize = boardSize / 30;\n\nclass Board extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      snake: {\n        head: {\n          x: 15,\n          y: 15\n        },\n        tail: {\n          x: 15,\n          y: 15\n        },\n        direction: '',\n        body: [{x:15,y:15}],\n        running: false,\n        alive: true,\n        speed: 2,\n        food: {},\n        livefood: {},\n        livefoodeaten: true,\n        currentscore: 0,\n        record: 0,\n        lives: 1\n      },\n    }\n  }\n\n    drawGrid() {\n        const {ctx} = this.state;\n        ctx.strokeStyle = 'rgba(255, 255, 255, 0.2)';\n        ctx.fillStyle = '#9575cd';\n        ctx.fillRect(0, 0, boardSize, boardSize) // fillrect is a function, so has ()\n        for (var vertical = cellSize; vertical < boardSize; vertical += cellSize){\n          ctx.beginPath();\n          ctx.moveTo(vertical, 0);\n          ctx.lineTo(vertical, boardSize);\n          ctx.stroke();\n        }\n        for (var horizontal = cellSize; horizontal < boardSize; horizontal += cellSize){\n          ctx.beginPath();\n          ctx.moveTo(0, horizontal);\n          ctx.lineTo(boardSize ,horizontal);\n          ctx.stroke();\n        }\n    }\n\n    drawGrid2() {\n      const {ctx} = this.state;\n      ctx.strokeStyle = 'rgba(255, 255, 255, 0.01)'; // strokeStyle is a field, no ()\n      ctx.fillStyle = '#9575cd';\n      //ctx.fillRect(0, 0, boardSize, boardSize) // fillrect is a function, so has ()\n      for (var vertical = cellSize; vertical < boardSize; vertical += cellSize){\n        ctx.beginPath();\n        ctx.moveTo(vertical, 0);\n        ctx.lineTo(vertical, boardSize);\n        ctx.stroke();\n      }\n      for (var horizontal = cellSize; horizontal < boardSize; horizontal += cellSize){\n        ctx.beginPath();\n        ctx.moveTo(0, horizontal);\n        ctx.lineTo(boardSize, horizontal);\n        ctx.stroke();\n      }\n    }\n\n    drawSnake(){\n      const {ctx, snake} = this.state;\n      ctx.fillStyle = '#795548';\n      snake.body.forEach(cord => { // for loop through the snake's body, fill rect\n        ctx.fillRect(cord.x * cellSize, cord.y * cellSize, 1 * cellSize, 1 * cellSize);\n      })\n    }\n\n    drawBoard(){\n        const canvas = this.refs.gameBoard;\n        this.setState({\n          canvas: canvas,\n          ctx: canvas.getContext('2d')\n        }, function () {\n          this.drawGrid();\n          this.drawSnake();\n          this.drawFood();\n        })\n    }\n    \n    changeDirection (direction) {\n      let newState = Object.assign({}, this.state);\n      if (direction === 'up' || direction === 'w'){\n        newState.snake.direction = 'up';\n      } else if (direction === 'down' || direction === 's'){\n        newState.snake.direction = 'down';\n      } else if (direction === 'left' || direction === 'a'){\n        newState.snake.direction = 'left';\n      } else if (direction === 'right' || direction === 'd'){\n        newState.snake.direction = 'right';\n      }\n      this.setState(newState);\n      this.canvasMoveSnake();\n    }\n\n    canvasMoveSnake(){\n      const {ctx, snake} = this.state;\n      ctx.fillStyle = '#9575cd';\n      this.drawRect(snake.tail.x,snake.tail.y,1,1);\n      ctx.fillStyle = 'yellow';\n      this.drawRect(snake.head.x,snake.head.y,1,1);\n      if (snake.head.x === snake.food.x && snake.head.y === snake.food.y) {\n        this.addBody();\n        this.addscore();\n        this.drawFood();\n      }\n      if (snake.head.x === snake.livefood.x && snake.head.y === snake.livefood.y) {\n        this.addBody();\n        this.addlive();\n        snake.livefoodeaten = true;\n      }\n      if (snake.alive === false && snake.running === false){\n        this.endGame();\n      }\n      this.drawGrid2();\n    }\n\n    drawRect(x, y, l, h) {\n      const {ctx} = this.state;\n      ctx.fillRect(x * cellSize, y * cellSize, l * cellSize, h * cellSize);\n    }\n    \n    componentDidMount () {\n        this.drawBoard();\n    } //as soon as the object is created, draw the board\n\n    addscore() {\n      let newState = Object.assign({}, this.state);\n      newState.snake.currentscore = newState.snake.currentscore + 1;\n      newState.display = newState.snake.currentscore;\n      this.setState(newState);\n    }\n\n    addlive() {\n      let newState = Object.assign({}, this.state);\n      newState.snake.lives = newState.snake.lives + 1;\n      this.setState(newState);\n    }\n\n    drawFood () {\n      const {ctx, snake} = this.state;\n      var position = {\n        x: Math.floor(Math.random() * 30),\n        y: Math.floor(Math.random() * 30)\n      }\n      while(this.exists(position)){\n        position.x = Math.floor(Math.random() * 30);\n        position.y = Math.floor(Math.random() * 30);\n      }\n      snake.food = position;\n      if (snake.livefoodeaten === true && \n        (position.x % 7 === 0 && position.y % 7 === 0)){\n        ctx.fillStyle = 'pink';\n        this.drawliveFood();\n      }\n      this.setState({\n        snake:snake\n      })\n      ctx.fillStyle = 'red';\n      this.drawRect(position.x, position.y,1,1);\n    }\n    \n    drawliveFood () {\n      const {ctx, snake} = this.state;\n      ctx.fillStyle = 'pink';\n      var position = {\n        x: Math.floor(Math.random() * 30),\n        y: Math.floor(Math.random() * 30)\n      }\n      while(this.exists(position) && (\n        position.x !== snake.food.x && position.y !== snake.food.y)){\n        position.x = Math.floor(Math.random() * 30);\n        position.y = Math.floor(Math.random() * 30);\n      }\n      snake.livefood = position;\n      snake.foodeaten = false;\n      this.setState({\n        snake:snake\n      })\n      this.drawRect(position.x, position.y,1,1);\n    }\n\n    // if the position is on the snake's body, return true, otherwise false.\n    exists(position) {\n      const {snake} = this.state;\n      for (var i = 0; i < snake.currentscore; i++){\n        var cord = {\n          x: snake.body[i].x,\n          y: snake.body[i].y\n        }\n        if (position.x === cord.x && position.y === cord.y){\n          return true;\n        }\n      }\n      return false;\n    }\n    \n    addBody() {\n      const {snake} = this.state;\n      var newTail = {}\n      switch(snake.direction){\n        case 'up':\n          newTail = {x: snake.tail.x, y: snake.tail.y - 1}\n          break;\n        case 'down':\n          newTail = {x: snake.tail.x, y: snake.tail.y + 1}\n          break;\n        case 'left':\n          newTail = {x: snake.tail.x - 1, y: snake.tail.y}\n          break;\n        case 'right':\n          newTail = {x: snake.tail.x + 1, y: snake.tail.y}\n          break;\n        default:\n          break;\n      }\n      snake.body.push(newTail)\n      snake.tail = newTail;\n    }\n\n    endGame() {\n      const {ctx} = this.state;\n      let newState = Object.assign({}, this.state);\n      newState.snake.running = false;\n      newState.snake.alive = false;\n      this.setState(newState);\n      //Horizonal Lines\n      ctx.fillStyle = 'white';\n      this.drawRect(5,9,4,1);\n      this.drawRect(5,13,4,1);\n      this.drawRect(11,9,2,1);\n      this.drawRect(11,12,2,1);\n      this.drawRect(22,9,3,1);\n      this.drawRect(22,11,3,1);\n      this.drawRect(22,13,3,1);\n      this.drawRect(6,16,2,1);\n      this.drawRect(6,20,2,1);\n      this.drawRect(16,16,4,1);\n      this.drawRect(16,18,4,1);\n      this.drawRect(16,20,4,1);\n      this.drawRect(21,16,4,1);\n      this.drawRect(21,18,4,1);\n      this.drawRect(23,20,2,1);\n      //Vertical Lines\n      this.drawRect(5,10,1,3);\n      this.drawRect(10,10,1,4);\n      this.drawRect(13,10,1,4);\n      this.drawRect(15,9,1,5);\n      this.drawRect(19,9,1,5);\n      this.drawRect(21,9,1,5);\n      this.drawRect(5,17,1,3);\n      this.drawRect(8,17,1,3);\n      this.drawRect(10,16,1,3);\n      this.drawRect(14,16,1,3);\n      this.drawRect(16,16,1,5);\n      this.drawRect(21,16,1,5);\n      this.drawRect(24,16,1,3);\n      //Dots\n      this.drawRect(7,11,1,1);\n      this.drawRect(8,12,1,1);\n      this.drawRect(16,10,1,1);\n      this.drawRect(17,11,1,1);\n      this.drawRect(18,10,1,1);\n      this.drawRect(11,19,1,1);\n      this.drawRect(12,20,1,1);\n      this.drawRect(13,19,1,1);\n      this.drawRect(22,19,1,1);\n    }\n\n    resetBoard(){\n      const {snake} = this.state;\n      const temp = snake.currentscore > snake.record? snake.currentscore:snake.record;\n      this.setState(({\n          snake: {\n            head: {\n              x: 15,\n              y: 15\n            },\n            tail: {\n              x: 15,\n              y: 15\n            },\n            direction: '',\n            body: [{x:15,y:15}],\n            running: false,\n            alive: true,\n            speed: 2,\n            food: {},\n            livefood: {},\n            livefoodeaten: true,\n            currentscore: 0,\n            record: temp,\n            lives: 1\n          },\n      }))\n      this.drawBoard();\n    }\n\n    revive(){\n      let newState = Object.assign({}, this.state);\n      newState.livefoodeaten = true;\n      this.setState(newState);\n      newState.snake.body.splice(0, newState.snake.body.length);\n      for (var i = 0; i < newState.snake.currentscore; i++){\n        var cord = {\n          x: 15,\n          y: 15\n        }\n        newState.snake.body.push(cord);\n      }\n      newState.snake.head.x = 15;\n      newState.snake.head.y = 15;\n      newState.snake.tail.x = 15;\n      newState.snake.tail.x = 15;\n      newState.alive = true;\n      newState.running = false;\n      this.setState(newState);\n      this.drawBoard();\n    }\n\n    speedUp(){\n      let newState = Object.assign({}, this.state);\n      newState.snake.speed = this.state.snake.speed + 0.25;        \n      this.setState(newState);\n    }\n\n    speedDown(){\n      let newState = Object.assign({}, this.state);\n      if (this.state.snake.speed >= 1.3) {\n        newState.snake.speed = this.state.snake.speed - 0.25;\n      } else {\n        newState.snake.speed = this.state.snake.speed;\n        alert(\"This is the lowest speed!\")\n      }\n      this.setState(newState);\n    }\n\n    render() {\n      const style={\n        position: 'absolute',\n        left: '150px',\n        top: '60px'\n      }\n        return (\n            <div id='gameContainer' className='container-fluid'>\n                <canvas id='gameBoard' ref=\"gameBoard\" width={boardSize} height={boardSize} style={style}/>\n                  <KeyboardEventHandler\n                    handleKeys={['r', 'esc', '[', ']', 'space', 'z']}\n                    onKeyEvent={(key, e) => {\n                      if(key === 'r'){\n                        this.resetBoard();\n                      } else if (key === 'esc'){\n                        this.endGame();\n                      } else if (key === '['){\n                        this.speedDown();\n                      } else if (key === ']'){\n                        this.speedUp();\n                      } else if (key === 'space') {\n                        alert(\"Paused! Click the button below to continue :)\");\n                      } else if (key === 'z'){\n                        this.addlive();\n                      }\n                    }}/>\n                    <Snake snake={this.state.snake}\n                    changeDirection={this.changeDirection.bind(this)}\n                    endGame={this.endGame.bind(this)}\n                    drawFood={this.drawFood.bind(this)}\n                    revive={this.revive.bind(this)}\n                  />\n                  <Panel  className = 'Panel'\n                  snake={this.state.snake}\n                  speedUp={this.speedUp.bind(this)}\n                  speedDown={this.speedDown.bind(this)}\n                  resetBoard={this.resetBoard.bind(this)}\n                  />\n            </div>\n        )\n    }\n}\n\nexport default Board;","import React from 'react';\nimport './App.css';\nimport Board from './Board'\nfunction App() {\n  document.title = 'Snake Game Designed by Jason W';\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Board />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
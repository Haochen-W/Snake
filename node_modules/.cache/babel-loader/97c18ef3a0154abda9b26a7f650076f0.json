{"ast":null,"code":"var _jsxFileName = \"/Users/JasonWu/snake/src/Board.js\";\nimport React from 'react';\nimport Snake from './snake';\nimport KeyboardEventHandler from 'react-keyboard-event-handler';\nconst boardSize = 720;\nconst cellSize = boardSize / 30;\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      snake: {\n        head: {\n          x: 15,\n          y: 15\n        },\n        tail: {\n          x: 15,\n          y: 15\n        },\n        direction: '',\n        body: [{\n          x: 15,\n          y: 15\n        }],\n        running: false,\n        alive: true,\n        speed: 2,\n        food: {}\n      }\n    };\n  }\n\n  drawGrid() {\n    const ctx = this.state.ctx; // create and set gradient\n    // var gradient = ctx.createLinearGradient(0, 0, boardSize, 0);\n    // gradient.addColorStop(\"0.1\", \"#e91e63\");\n    // gradient.addColorStop(\"0.3\", \"#FFC107\");\n    // gradient.addColorStop(\"0.5\", \"#8bc34a\");\n    // gradient.addColorStop(\"0.7\", \"#03a9f4\");\n    // gradient.addColorStop(\"0.9\", \"#ba68c8\");\n    // ctx.fillStyle = gradient;\n\n    ctx.strokeStyle = '#bbdefb'; // strokeStyle is a field, no ()\n\n    ctx.fillStyle = '#9575cd';\n    ctx.fillRect(0, 0, boardSize, boardSize); // fillrect is a function, so has ()\n\n    for (var vertical = cellSize; vertical < boardSize; vertical += cellSize) {\n      ctx.beginPath();\n      ctx.moveTo(vertical, 0);\n      ctx.lineTo(vertical, boardSize);\n      ctx.stroke();\n    }\n\n    for (var horizontal = cellSize; horizontal < boardSize; horizontal += cellSize) {\n      ctx.beginPath();\n      ctx.moveTo(0, horizontal);\n      ctx.lineTo(boardSize, horizontal);\n      ctx.stroke();\n    }\n  }\n\n  drawSnake() {\n    const _this$state = this.state,\n          ctx = _this$state.ctx,\n          snake = _this$state.snake;\n    ctx.fillStyle = '#795548';\n    snake.body.forEach(cord => {\n      // for loop through the snake's body, fill rect\n      ctx.fillRect(cord.x * cellSize, cord.y * cellSize, 1 * cellSize, 1 * cellSize);\n    });\n  }\n\n  drawBoard() {\n    const canvas = this.refs.gameBoard;\n    this.setState({\n      canvas: canvas,\n      ctx: canvas.getContext('2d')\n    }, function () {\n      this.drawGrid();\n      this.drawSnake();\n      this.drawFood();\n    });\n  }\n\n  changeDirection(direction) {\n    let newState = Object.assign({}, this.state);\n    newState.snake.direction = direction;\n    this.setState(newState);\n    this.canvasMoveSnake();\n  }\n\n  canvasMoveSnake() {\n    const _this$state2 = this.state,\n          ctx = _this$state2.ctx,\n          snake = _this$state2.snake;\n    ctx.fillStyle = '#9575cd';\n    this.drawRect(snake.tail.x, snake.tail.y, 1, 1);\n    ctx.fillStyle = 'yellow';\n    this.drawRect(snake.head.x, snake.head.y, 1, 1);\n\n    if (snake.head.x === snake.food.x && snake.head.y === snake.food.y) {\n      this.addBody();\n      this.drawFood();\n    }\n\n    if (snake.alive === false && snake.running === false) {\n      this.endGame();\n    }\n  }\n\n  drawRect(x, y, l, h) {\n    const ctx = this.state.ctx;\n    ctx.fillRect(x * cellSize, y * cellSize, l * cellSize, h * cellSize);\n  }\n\n  componentDidMount() {\n    this.drawBoard();\n  } //as soon as the object is created, draw the board\n\n\n  drawFood() {\n    const _this$state3 = this.state,\n          ctx = _this$state3.ctx,\n          snake = _this$state3.snake;\n    ctx.fillStyle = 'red';\n    var position = {\n      x: Math.floor(Math.random() * 30),\n      y: Math.floor(Math.random() * 30)\n    };\n\n    while (this.exists(position)) {\n      position.x = Math.floor(Math.random() * 30);\n      position.y = Math.floor(Math.random() * 30);\n    }\n\n    snake.food = position;\n    this.setState({\n      snake: snake\n    });\n    this.drawRect(position.x, position.y, 1, 1);\n  }\n\n  exists(point) {\n    const snake = this.state.snake;\n\n    for (var cord in snake.body) {\n      if (point.x === cord.x && point.y === cord.y) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  addBody() {\n    const snake = this.state.snake;\n    var newTail = {};\n\n    switch (snake.direction) {\n      case 'up':\n        newTail = {\n          x: snake.tail.x,\n          y: snake.tail.y - 1\n        };\n        break;\n\n      case 'down':\n        newTail = {\n          x: snake.tail.x,\n          y: snake.tail.y + 1\n        };\n        break;\n\n      case 'left':\n        newTail = {\n          x: snake.tail.x - 1,\n          y: snake.tail.y\n        };\n        break;\n\n      case 'right':\n        newTail = {\n          x: snake.tail.x + 1,\n          y: snake.tail.y\n        };\n        break;\n\n      default:\n        break;\n    }\n\n    snake.body.push(newTail);\n    snake.tail = newTail;\n  }\n\n  endGame() {\n    const ctx = this.state.ctx;\n    let newState = Object.assign({}, this.state);\n    newState.snake.running = false;\n    newState.snake.alive = false;\n    this.setState(newState); //Horizonal Lines\n\n    ctx.fillStyle = 'white';\n    this.drawRect(5, 9, 4, 1);\n    this.drawRect(5, 13, 4, 1);\n    this.drawRect(11, 9, 2, 1);\n    this.drawRect(11, 12, 2, 1);\n    this.drawRect(22, 9, 3, 1);\n    this.drawRect(22, 11, 3, 1);\n    this.drawRect(22, 13, 3, 1);\n    this.drawRect(6, 16, 2, 1);\n    this.drawRect(6, 20, 2, 1);\n    this.drawRect(16, 16, 4, 1);\n    this.drawRect(16, 18, 4, 1);\n    this.drawRect(16, 20, 4, 1);\n    this.drawRect(21, 16, 4, 1);\n    this.drawRect(21, 18, 4, 1);\n    this.drawRect(23, 20, 2, 1); //Vertical Lines\n\n    this.drawRect(5, 10, 1, 3);\n    this.drawRect(10, 10, 1, 4);\n    this.drawRect(13, 10, 1, 4);\n    this.drawRect(15, 9, 1, 5);\n    this.drawRect(19, 9, 1, 5);\n    this.drawRect(21, 9, 1, 5);\n    this.drawRect(5, 17, 1, 3);\n    this.drawRect(8, 17, 1, 3);\n    this.drawRect(10, 16, 1, 3);\n    this.drawRect(14, 16, 1, 3);\n    this.drawRect(16, 16, 1, 5);\n    this.drawRect(21, 16, 1, 5);\n    this.drawRect(24, 16, 1, 3); //Dots\n\n    this.drawRect(7, 11, 1, 1);\n    this.drawRect(8, 12, 1, 1);\n    this.drawRect(16, 10, 1, 1);\n    this.drawRect(17, 11, 1, 1);\n    this.drawRect(18, 10, 1, 1);\n    this.drawRect(11, 19, 1, 1);\n    this.drawRect(12, 20, 1, 1);\n    this.drawRect(13, 19, 1, 1);\n    this.drawRect(22, 19, 1, 1);\n  }\n\n  resetBoard() {\n    this.setState({\n      snake: {\n        head: {\n          x: 15,\n          y: 15\n        },\n        tail: {\n          x: 15,\n          y: 15\n        },\n        direction: '',\n        body: [{\n          x: 15,\n          y: 15\n        }],\n        running: false,\n        alive: true,\n        speed: 2,\n        food: {}\n      }\n    });\n    this.drawBoard();\n  }\n\n  speedUp() {\n    let newState = Object.assign({}, this.state);\n    newState.snake.speed = this.state.snake.speed + 0.3;\n    this.setState(newState);\n  }\n\n  speedDown() {\n    let newState = Object.assign({}, this.state);\n\n    if (this.state.snake.speed >= 1.3) {\n      newState.snake.speed = this.state.snake.speed - 0.3;\n    } else {\n      newState.snake.speed = this.state.snake.speed;\n      alert(\"This is the lowest speed!\");\n    }\n\n    this.setState(newState);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"gameContainer\",\n      className: \"container-fluid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    }, React.createElement(\"canvas\", {\n      id: \"gameBoard\",\n      ref: \"gameBoard\",\n      width: boardSize,\n      height: boardSize,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255\n      },\n      __self: this\n    }), React.createElement(KeyboardEventHandler, {\n      handleKeys: ['r', 'esc', '[', ']'],\n      onKeyEvent: (key, e) => {\n        if (key === 'r') {\n          this.resetBoard();\n        } else if (key === 'esc') {\n          this.endGame();\n        } else if (key === '[') {\n          this.speedDown();\n        } else if (key === ']') {\n          this.speedUp();\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    }), React.createElement(Snake, {\n      snake: this.state.snake,\n      changeDirection: this.changeDirection.bind(this),\n      endGame: this.endGame.bind(this),\n      drawGrid: this.drawGrid.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/JasonWu/snake/src/Board.js"],"names":["React","Snake","KeyboardEventHandler","boardSize","cellSize","Board","Component","constructor","props","state","snake","head","x","y","tail","direction","body","running","alive","speed","food","drawGrid","ctx","strokeStyle","fillStyle","fillRect","vertical","beginPath","moveTo","lineTo","stroke","horizontal","drawSnake","forEach","cord","drawBoard","canvas","refs","gameBoard","setState","getContext","drawFood","changeDirection","newState","Object","assign","canvasMoveSnake","drawRect","addBody","endGame","l","h","componentDidMount","position","Math","floor","random","exists","point","newTail","push","resetBoard","speedUp","speedDown","alert","render","key","e","bind"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Snake from './snake';\nimport KeyboardEventHandler from 'react-keyboard-event-handler';\nconst boardSize = 720;\nconst cellSize = boardSize / 30;\n\nclass Board extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      snake: {\n        head: {\n          x: 15,\n          y: 15\n        },\n        tail: {\n          x: 15,\n          y: 15\n        },\n        direction: '',\n        body: [{x:15,y:15}],\n        running: false,\n        alive: true,\n        speed: 2,\n        food: {}\n      }\n    }\n  }\n\n    drawGrid() {\n        const {ctx} = this.state;\n        // create and set gradient\n        // var gradient = ctx.createLinearGradient(0, 0, boardSize, 0);\n        // gradient.addColorStop(\"0.1\", \"#e91e63\");\n        // gradient.addColorStop(\"0.3\", \"#FFC107\");\n        // gradient.addColorStop(\"0.5\", \"#8bc34a\");\n        // gradient.addColorStop(\"0.7\", \"#03a9f4\");\n        // gradient.addColorStop(\"0.9\", \"#ba68c8\");\n        // ctx.fillStyle = gradient;\n        ctx.strokeStyle = '#bbdefb'; // strokeStyle is a field, no ()\n        ctx.fillStyle = '#9575cd';\n        ctx.fillRect(0, 0, boardSize, boardSize) // fillrect is a function, so has ()\n        for (var vertical = cellSize; vertical < boardSize; vertical += cellSize){\n          ctx.beginPath();\n          ctx.moveTo(vertical, 0);\n          ctx.lineTo(vertical, boardSize);\n          ctx.stroke();\n        }\n      \n        for (var horizontal = cellSize; horizontal < boardSize; horizontal += cellSize){\n          ctx.beginPath();\n          ctx.moveTo(0, horizontal);\n          ctx.lineTo(boardSize ,horizontal);\n          ctx.stroke();\n        }\n    }\n\n    drawSnake(){\n      const {ctx, snake} = this.state\n      ctx.fillStyle = '#795548';\n      snake.body.forEach(cord => { // for loop through the snake's body, fill rect\n        ctx.fillRect(cord.x * cellSize, cord.y * cellSize, 1 * cellSize, 1 * cellSize);\n      })\n    }\n\n    drawBoard(){\n        const canvas = this.refs.gameBoard\n        this.setState({\n          canvas: canvas,\n          ctx: canvas.getContext('2d')\n        }, function () {\n          this.drawGrid();\n          this.drawSnake();\n          this.drawFood();\n        })\n    }\n    \n    changeDirection (direction) {\n      let newState = Object.assign({}, this.state);\n      newState.snake.direction = direction;\n      this.setState(newState);\n      this.canvasMoveSnake();\n    }\n\n    canvasMoveSnake(){\n      const {ctx, snake} = this.state\n      ctx.fillStyle = '#9575cd';\n      this.drawRect(snake.tail.x,snake.tail.y,1,1);\n      ctx.fillStyle = 'yellow';\n      this.drawRect(snake.head.x,snake.head.y,1,1);\n      if (snake.head.x === snake.food.x && snake.head.y === snake.food.y) {\n        this.addBody();\n        this.drawFood();\n      }\n      if (snake.alive === false && snake.running === false){\n        this.endGame();\n      }\n    }\n\n    drawRect(x, y, l, h) {\n      const {ctx} = this.state;\n      ctx.fillRect(x * cellSize, y * cellSize, l * cellSize, h * cellSize);\n    }\n    \n    componentDidMount () {\n        this.drawBoard();\n    } //as soon as the object is created, draw the board\n\n    drawFood () {\n      const {ctx, snake} = this.state;\n      ctx.fillStyle = 'red';\n      var position = {\n        x: Math.floor(Math.random() * 30),\n        y: Math.floor(Math.random() * 30)\n      }\n      while (this.exists(position)) {\n        position.x = Math.floor(Math.random() * 30);\n        position.y = Math.floor(Math.random() * 30);\n      }\n      snake.food = position;\n      this.setState({\n        snake:snake\n      })\n      this.drawRect(position.x, position.y,1,1);\n    }\n    exists(point) {\n      const {snake} = this.state;\n    \n      for (var cord in snake.body) {\n        if (point.x === cord.x && point.y === cord.y) {\n          return true\n        }\n      }\n      return false\n    }\n\n    addBody() {\n      const {snake} = this.state\n      var newTail = {}\n      switch(snake.direction){\n        case 'up':\n          newTail = {x: snake.tail.x, y: snake.tail.y - 1}\n          break;\n        case 'down':\n          newTail = {x: snake.tail.x, y: snake.tail.y + 1}\n          break;\n        case 'left':\n          newTail = {x: snake.tail.x - 1, y: snake.tail.y}\n          break;\n        case 'right':\n          newTail = {x: snake.tail.x + 1, y: snake.tail.y}\n          break;\n        default:\n          break;\n      }\n      snake.body.push(newTail)\n      snake.tail = newTail\n    }\n\n    endGame() {\n      const {ctx} = this.state\n    \n      let newState = Object.assign({}, this.state);\n      newState.snake.running = false;\n      newState.snake.alive = false;\n      this.setState(newState);\n    \n      //Horizonal Lines\n      ctx.fillStyle = 'white';\n      this.drawRect(5,9,4,1);\n      this.drawRect(5,13,4,1);\n      this.drawRect(11,9,2,1);\n      this.drawRect(11,12,2,1);\n      this.drawRect(22,9,3,1);\n      this.drawRect(22,11,3,1);\n      this.drawRect(22,13,3,1);\n      this.drawRect(6,16,2,1);\n      this.drawRect(6,20,2,1);\n      this.drawRect(16,16,4,1);\n      this.drawRect(16,18,4,1);\n      this.drawRect(16,20,4,1);\n      this.drawRect(21,16,4,1);\n      this.drawRect(21,18,4,1);\n      this.drawRect(23,20,2,1);\n    \n      //Vertical Lines\n      this.drawRect(5,10,1,3);\n      this.drawRect(10,10,1,4);\n      this.drawRect(13,10,1,4);\n      this.drawRect(15,9,1,5);\n      this.drawRect(19,9,1,5);\n      this.drawRect(21,9,1,5);\n      this.drawRect(5,17,1,3);\n      this.drawRect(8,17,1,3);\n      this.drawRect(10,16,1,3);\n      this.drawRect(14,16,1,3);\n      this.drawRect(16,16,1,5);\n      this.drawRect(21,16,1,5);\n      this.drawRect(24,16,1,3);\n    \n      //Dots\n      this.drawRect(7,11,1,1);\n      this.drawRect(8,12,1,1);\n      this.drawRect(16,10,1,1);\n      this.drawRect(17,11,1,1);\n      this.drawRect(18,10,1,1);\n      this.drawRect(11,19,1,1);\n      this.drawRect(12,20,1,1);\n      this.drawRect(13,19,1,1);\n      this.drawRect(22,19,1,1);\n    }\n\n    resetBoard(){\n      this.setState(({\n          snake: {\n            head: {\n              x: 15,\n              y: 15\n            },\n            tail: {\n              x: 15,\n              y: 15\n            },\n            direction: '',\n            body: [{x:15,y:15}],\n            running: false,\n            alive: true,\n            speed: 2,\n            food: {}\n          }\n      }))\n      this.drawBoard();\n    }\n\n    speedUp(){\n      let newState = Object.assign({}, this.state);\n      newState.snake.speed = this.state.snake.speed + 0.3;        \n      this.setState(newState);\n    }\n\n    speedDown(){\n      let newState = Object.assign({}, this.state);\n      if (this.state.snake.speed >= 1.3) {\n        newState.snake.speed = this.state.snake.speed - 0.3;\n      } else {\n        newState.snake.speed = this.state.snake.speed;\n        alert(\"This is the lowest speed!\")\n      }\n      this.setState(newState);\n    }\n\n    render() {\n        return (\n            <div id='gameContainer' className='container-fluid'>\n                <canvas id='gameBoard' ref=\"gameBoard\" width={boardSize} height={boardSize} />\n                  <KeyboardEventHandler\n                    handleKeys={['r', 'esc', '[', ']']}\n                    onKeyEvent={(key, e) => {\n                      if(key === 'r'){\n                        this.resetBoard();\n                      } else if (key === 'esc'){\n                        this.endGame();\n                      } else if (key === '['){\n                        this.speedDown();\n                      } else if (key === ']'){\n                        this.speedUp();\n                      }\n                    }}/>\n                    <Snake snake={this.state.snake}\n                    changeDirection={this.changeDirection.bind(this)}\n                    endGame={this.endGame.bind(this)}\n                    drawGrid={this.drawGrid.bind(this)}\n                  />\n            </div>\n        )\n    }\n}\n\nexport default Board;"]},"metadata":{},"sourceType":"module"}
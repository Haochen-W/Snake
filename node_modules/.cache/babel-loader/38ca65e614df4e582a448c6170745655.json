{"ast":null,"code":"var _jsxFileName = \"/Users/JasonWu/snake/src/snake.js\";\nimport React from 'react';\nimport KeyboardEventHandler from 'react-keyboard-event-handler';\nimport _ from 'lodash';\n\nclass Snake extends React.Component {\n  selfCollide() {\n    const snake = this.props.snake;\n    return snake.body.some(cord => _.isEqual(cord, snake.head)) || _.isEqual(snake.head, snake.tail);\n  }\n\n  run() {\n    this.props.snake.running = true;\n    var running = setInterval(() => {\n      const snake = this.props.snake;\n\n      switch (snake.direction) {\n        case 'up':\n          snake.head.y -= 1;\n          break;\n\n        case 'down':\n          snake.head.y += 1;\n          break;\n\n        case 'left':\n          snake.head.x -= 1;\n          break;\n\n        case 'right':\n          snake.head.x += 1;\n          break;\n\n        default:\n          break;\n      }\n\n      if (this.props.snake.running === false) {\n        clearInterval(running);\n      }\n\n      if (snake.head.x > 29 || snake.head.y > 29 || snake.head.x < 0 || snake.head.y < 0 || this.selfCollide()) {\n        snake.running = false;\n        snake.alive = false;\n        clearInterval(running);\n      }\n\n      var newCell = {\n        x: snake.head.x,\n        y: snake.head.y\n      };\n      snake.body.push(newCell);\n      snake.tail.x = snake.body[0].x;\n      snake.tail.y = snake.body[0].y;\n      snake.body.splice(0, 1);\n      this.props.changeDirection(snake.direction);\n    }, 200 / this.props.snake.speed);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"Snake\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(KeyboardEventHandler, {\n      handleKeys: ['left', 'up', 'right', 'down', 'space'],\n      onKeyEvent: (key, e) => {\n        if (key === 'up' && (this.props.snake.direction === 'down' || this.props.snake.direction === 'up')) {\n          return;\n        }\n\n        if (key === 'down' && (this.props.snake.direction === 'down' || this.props.snake.direction === 'up')) {\n          return;\n        }\n\n        if (key === 'left' && (this.props.snake.direction === 'left' || this.props.snake.direction === 'right')) {\n          return;\n        }\n\n        if (key === 'right' && (this.props.snake.direction === 'left' || this.props.snake.direction === 'right')) {\n          return;\n        }\n\n        if (this.props.snake.alive === false && this.props.snake.running === false) {\n          this.props.endGame();\n        }\n\n        if (!this.props.snake.running && this.props.snake.alive) {\n          this.run();\n        }\n\n        this.props.changeDirection(key);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Snake;","map":{"version":3,"sources":["/Users/JasonWu/snake/src/snake.js"],"names":["React","KeyboardEventHandler","_","Snake","Component","selfCollide","snake","props","body","some","cord","isEqual","head","tail","run","running","setInterval","direction","y","x","clearInterval","alive","newCell","push","splice","changeDirection","speed","render","key","e","endGame"],"mappings":"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","sourcesContent":["import React from 'react';\nimport KeyboardEventHandler from 'react-keyboard-event-handler'\nimport _ from 'lodash'\n\nclass Snake extends React.Component{\n    selfCollide() {\n      const snake = this.props.snake;\n      return snake.body.some(cord => _.isEqual(cord, snake.head)) || _.isEqual(snake.head, snake.tail)\n    }\n    run() {\n        this.props.snake.running = true;\n        var running = setInterval(() => {\n            const snake = this.props.snake;\n            switch(snake.direction){\n                case 'up':\n                  snake.head.y -= 1;\n                  break;\n                case 'down':\n                  snake.head.y += 1;\n                  break;\n                    case 'left':\n                snake.head.x -= 1;\n                  break;\n                case 'right':\n                  snake.head.x += 1;\n                  break;\n                default:\n                break;\n            }\n  \n            if(this.props.snake.running === false){\n                clearInterval(running)\n            }\n            \n            if (snake.head.x > 29 || snake.head.y > 29 || snake.head.x < 0 || snake.head.y < 0 || this.selfCollide()) {\n              snake.running = false\n              snake.alive = false\n              clearInterval(running);\n            }\n\n            var newCell = {\n              x: snake.head.x,\n              y: snake.head.y\n            }\n            \n            snake.body.push(newCell)\n            snake.tail.x = snake.body[0].x;\n            snake.tail.y = snake.body[0].y;\n            snake.body.splice(0,1);\n\n            this.props.changeDirection(snake.direction);\n\n        }, 200 / this.props.snake.speed);\n      }\n\n    render(){\n       return(\n           <div id=\"Snake\">\n            <KeyboardEventHandler\n                  handleKeys={['left', 'up', 'right', 'down', 'space']}\n                  onKeyEvent={(key, e) => {\n                    if (key === 'up' && (this.props.snake.direction === 'down' || this.props.snake.direction === 'up')) {\n                      return\n                    }\n                    if (key === 'down' && (this.props.snake.direction === 'down' || this.props.snake.direction === 'up')) {\n                      return\n                    }\n                    if (key === 'left' && (this.props.snake.direction === 'left' || this.props.snake.direction === 'right')) {\n                      return\n                    }\n                    if (key === 'right' && (this.props.snake.direction === 'left' || this.props.snake.direction === 'right')) {\n                      return\n                    }\n                    if (this.props.snake.alive === false && this.props.snake.running === false){\n                        this.props.endGame();\n                    }\n                    if (!this.props.snake.running && this.props.snake.alive ){\n                        this.run();\n                    }\n                    this.props.changeDirection(key);\n                  }}/>\n           </div>\n       );\n   }\n}\n\nexport default Snake;"]},"metadata":{},"sourceType":"module"}
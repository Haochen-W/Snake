{"ast":null,"code":"var _jsxFileName = \"/Users/JasonWu/snake/src/Board.js\";\nimport React from 'react';\nimport Snake from './snake';\nimport KeyboardEventHandler from 'react-keyboard-event-handler';\nconst boardSize = 720;\nconst cellSize = boardSize / 30;\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      snake: {\n        head: {\n          x: 15,\n          y: 15\n        },\n        tail: {\n          x: 15,\n          y: 15\n        },\n        direction: '',\n        body: [{\n          x: 15,\n          y: 15\n        }],\n        running: false,\n        alive: true,\n        speed: 2,\n        food: {},\n        livefood: {},\n        currentscore: 0,\n        lives: 3\n      },\n      display: '0'\n    };\n  }\n\n  drawGrid() {\n    const ctx = this.state.ctx;\n    ctx.strokeStyle = 'rgba(255, 255, 255, 0.2)';\n    ctx.fillStyle = '#9575cd';\n    ctx.fillRect(0, 0, boardSize, boardSize); // fillrect is a function, so has ()\n\n    for (var vertical = cellSize; vertical < boardSize; vertical += cellSize) {\n      ctx.beginPath();\n      ctx.moveTo(vertical, 0);\n      ctx.lineTo(vertical, boardSize);\n      ctx.stroke();\n    }\n\n    for (var horizontal = cellSize; horizontal < boardSize; horizontal += cellSize) {\n      ctx.beginPath();\n      ctx.moveTo(0, horizontal);\n      ctx.lineTo(boardSize, horizontal);\n      ctx.stroke();\n    }\n  }\n\n  drawGrid2() {\n    const ctx = this.state.ctx;\n    ctx.strokeStyle = 'rgba(255, 255, 255, 0.01)'; // strokeStyle is a field, no ()\n\n    ctx.fillStyle = '#9575cd'; //ctx.fillRect(0, 0, boardSize, boardSize) // fillrect is a function, so has ()\n\n    for (var vertical = cellSize; vertical < boardSize; vertical += cellSize) {\n      ctx.beginPath();\n      ctx.moveTo(vertical, 0);\n      ctx.lineTo(vertical, boardSize);\n      ctx.stroke();\n    }\n\n    for (var horizontal = cellSize; horizontal < boardSize; horizontal += cellSize) {\n      ctx.beginPath();\n      ctx.moveTo(0, horizontal);\n      ctx.lineTo(boardSize, horizontal);\n      ctx.stroke();\n    }\n  }\n\n  drawSnake() {\n    const _this$state = this.state,\n          ctx = _this$state.ctx,\n          snake = _this$state.snake;\n    ctx.fillStyle = '#795548';\n    snake.body.forEach(cord => {\n      // for loop through the snake's body, fill rect\n      ctx.fillRect(cord.x * cellSize, cord.y * cellSize, 1 * cellSize, 1 * cellSize);\n    });\n  }\n\n  drawBoard() {\n    const canvas = this.refs.gameBoard;\n    this.setState({\n      canvas: canvas,\n      ctx: canvas.getContext('2d')\n    }, function () {\n      this.drawGrid();\n      this.drawSnake();\n      this.drawFood();\n    });\n  }\n\n  changeDirection(direction) {\n    let newState = Object.assign({}, this.state);\n\n    if (direction === 'up' || direction === 'w') {\n      newState.snake.direction = 'up';\n    } else if (direction === 'down' || direction === 's') {\n      newState.snake.direction = 'down';\n    } else if (direction === 'left' || direction === 'a') {\n      newState.snake.direction = 'left';\n    } else if (direction === 'right' || direction === 'd') {\n      newState.snake.direction = 'right';\n    }\n\n    this.setState(newState);\n    this.canvasMoveSnake();\n  }\n\n  canvasMoveSnake() {\n    const _this$state2 = this.state,\n          ctx = _this$state2.ctx,\n          snake = _this$state2.snake;\n    ctx.fillStyle = '#9575cd';\n    this.drawRect(snake.tail.x, snake.tail.y, 1, 1);\n    ctx.fillStyle = 'yellow';\n    this.drawRect(snake.head.x, snake.head.y, 1, 1);\n\n    if (snake.head.x === snake.food.x && snake.head.y === snake.food.y) {\n      this.addBody();\n      this.addscore();\n      this.drawFood();\n    }\n\n    if (snake.head.x === snake.livefood.x && snake.head.y === snake.livefood.y) {\n      this.addBody();\n      snake.lives += 1;\n      this.drawliveFood();\n    }\n\n    if (snake.alive === false && snake.running === false) {\n      this.endGame();\n    }\n\n    this.drawGrid2();\n  }\n\n  drawRect(x, y, l, h) {\n    const ctx = this.state.ctx;\n    ctx.fillRect(x * cellSize, y * cellSize, l * cellSize, h * cellSize);\n  }\n\n  componentDidMount() {\n    this.drawBoard();\n  } //as soon as the object is created, draw the board\n\n\n  addscore() {\n    let newState = Object.assign({}, this.state);\n    newState.snake.currentscore = newState.snake.currentscore + 1;\n    newState.display = newState.snake.currentscore;\n    this.setState(newState);\n  }\n\n  drawFood() {\n    const _this$state3 = this.state,\n          ctx = _this$state3.ctx,\n          snake = _this$state3.snake;\n    ctx.fillStyle = 'red';\n    var position = {\n      x: Math.floor(Math.random() * 30),\n      y: Math.floor(Math.random() * 30)\n    };\n\n    while (this.exists(position)) {\n      position.x = Math.floor(Math.random() * 30);\n      position.y = Math.floor(Math.random() * 30);\n    }\n\n    snake.food = position;\n    this.setState({\n      snake: snake\n    });\n    this.drawRect(position.x, position.y, 1, 1);\n  }\n\n  drawliveFood() {\n    const _this$state4 = this.state,\n          ctx = _this$state4.ctx,\n          snake = _this$state4.snake;\n    ctx.fillStyle = 'pink';\n    var position = {\n      x: Math.floor(Math.random() * 30),\n      y: Math.floor(Math.random() * 30)\n    };\n\n    while (this.exists(position)) {\n      position.x = Math.floor(Math.random() * 30);\n      position.y = Math.floor(Math.random() * 30);\n    }\n\n    snake.food = position;\n    this.setState({\n      snake: snake\n    });\n    this.drawRect(position.x, position.y, 1, 1);\n  } // if the position is on the snake's body, return true, otherwise false.\n\n\n  exists(position) {\n    const snake = this.state.snake;\n\n    for (var i = 0; i < snake.currentscore; i++) {\n      var cord = {\n        x: snake.body[i].x,\n        y: snake.body[i].y\n      };\n\n      if (position.x === cord.x && position.y === cord.y) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  addBody() {\n    const snake = this.state.snake;\n    var newTail = {};\n\n    switch (snake.direction) {\n      case 'up':\n        newTail = {\n          x: snake.tail.x,\n          y: snake.tail.y - 1\n        };\n        break;\n\n      case 'down':\n        newTail = {\n          x: snake.tail.x,\n          y: snake.tail.y + 1\n        };\n        break;\n\n      case 'left':\n        newTail = {\n          x: snake.tail.x - 1,\n          y: snake.tail.y\n        };\n        break;\n\n      case 'right':\n        newTail = {\n          x: snake.tail.x + 1,\n          y: snake.tail.y\n        };\n        break;\n\n      default:\n        break;\n    }\n\n    snake.body.push(newTail);\n    snake.tail = newTail;\n  }\n\n  endGame() {\n    const ctx = this.state.ctx;\n    let newState = Object.assign({}, this.state);\n    newState.snake.running = false;\n    newState.snake.alive = false;\n    this.setState(newState); //Horizonal Lines\n\n    ctx.fillStyle = 'white';\n    this.drawRect(5, 9, 4, 1);\n    this.drawRect(5, 13, 4, 1);\n    this.drawRect(11, 9, 2, 1);\n    this.drawRect(11, 12, 2, 1);\n    this.drawRect(22, 9, 3, 1);\n    this.drawRect(22, 11, 3, 1);\n    this.drawRect(22, 13, 3, 1);\n    this.drawRect(6, 16, 2, 1);\n    this.drawRect(6, 20, 2, 1);\n    this.drawRect(16, 16, 4, 1);\n    this.drawRect(16, 18, 4, 1);\n    this.drawRect(16, 20, 4, 1);\n    this.drawRect(21, 16, 4, 1);\n    this.drawRect(21, 18, 4, 1);\n    this.drawRect(23, 20, 2, 1); //Vertical Lines\n\n    this.drawRect(5, 10, 1, 3);\n    this.drawRect(10, 10, 1, 4);\n    this.drawRect(13, 10, 1, 4);\n    this.drawRect(15, 9, 1, 5);\n    this.drawRect(19, 9, 1, 5);\n    this.drawRect(21, 9, 1, 5);\n    this.drawRect(5, 17, 1, 3);\n    this.drawRect(8, 17, 1, 3);\n    this.drawRect(10, 16, 1, 3);\n    this.drawRect(14, 16, 1, 3);\n    this.drawRect(16, 16, 1, 5);\n    this.drawRect(21, 16, 1, 5);\n    this.drawRect(24, 16, 1, 3); //Dots\n\n    this.drawRect(7, 11, 1, 1);\n    this.drawRect(8, 12, 1, 1);\n    this.drawRect(16, 10, 1, 1);\n    this.drawRect(17, 11, 1, 1);\n    this.drawRect(18, 10, 1, 1);\n    this.drawRect(11, 19, 1, 1);\n    this.drawRect(12, 20, 1, 1);\n    this.drawRect(13, 19, 1, 1);\n    this.drawRect(22, 19, 1, 1);\n  }\n\n  resetBoard() {\n    this.setState({\n      snake: {\n        head: {\n          x: 15,\n          y: 15\n        },\n        tail: {\n          x: 15,\n          y: 15\n        },\n        direction: '',\n        body: [{\n          x: 15,\n          y: 15\n        }],\n        running: false,\n        alive: true,\n        speed: 2,\n        food: {},\n        currentscore: 0,\n        lives: 3\n      },\n      display: '0'\n    });\n    this.drawBoard();\n  }\n\n  speedUp() {\n    let newState = Object.assign({}, this.state);\n    newState.snake.speed = this.state.snake.speed + 0.3;\n    this.setState(newState);\n  }\n\n  speedDown() {\n    let newState = Object.assign({}, this.state);\n\n    if (this.state.snake.speed >= 1.3) {\n      newState.snake.speed = this.state.snake.speed - 0.3;\n    } else {\n      newState.snake.speed = this.state.snake.speed;\n      alert(\"This is the lowest speed!\");\n    }\n\n    this.setState(newState);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"gameContainer\",\n      className: \"container-fluid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312\n      },\n      __self: this\n    }, this.state.display, React.createElement(\"canvas\", {\n      id: \"gameBoard\",\n      ref: \"gameBoard\",\n      width: boardSize,\n      height: boardSize,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314\n      },\n      __self: this\n    }), React.createElement(KeyboardEventHandler, {\n      handleKeys: ['r', 'esc', '[', ']', 'space'],\n      onKeyEvent: (key, e) => {\n        if (key === 'r') {\n          this.resetBoard();\n        } else if (key === 'esc') {\n          this.endGame();\n        } else if (key === '[') {\n          this.speedDown();\n        } else if (key === ']') {\n          this.speedUp();\n        } else if (key === 'space') {\n          alert(\"Paused! Click the button below to continue :)\");\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315\n      },\n      __self: this\n    }), React.createElement(Snake, {\n      snake: this.state.snake,\n      changeDirection: this.changeDirection.bind(this),\n      endGame: this.endGame.bind(this),\n      drawFood: this.drawFood.bind(this),\n      drawliveFood: this.drawFood.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/JasonWu/snake/src/Board.js"],"names":["React","Snake","KeyboardEventHandler","boardSize","cellSize","Board","Component","constructor","props","state","snake","head","x","y","tail","direction","body","running","alive","speed","food","livefood","currentscore","lives","display","drawGrid","ctx","strokeStyle","fillStyle","fillRect","vertical","beginPath","moveTo","lineTo","stroke","horizontal","drawGrid2","drawSnake","forEach","cord","drawBoard","canvas","refs","gameBoard","setState","getContext","drawFood","changeDirection","newState","Object","assign","canvasMoveSnake","drawRect","addBody","addscore","drawliveFood","endGame","l","h","componentDidMount","position","Math","floor","random","exists","i","newTail","push","resetBoard","speedUp","speedDown","alert","render","key","e","bind"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Snake from './snake';\nimport KeyboardEventHandler from 'react-keyboard-event-handler';\nconst boardSize = 720;\nconst cellSize = boardSize / 30;\n\nclass Board extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      snake: {\n        head: {\n          x: 15,\n          y: 15\n        },\n        tail: {\n          x: 15,\n          y: 15\n        },\n        direction: '',\n        body: [{x:15,y:15}],\n        running: false,\n        alive: true,\n        speed: 2,\n        food: {},\n        livefood: {},\n        currentscore: 0,\n        lives: 3\n      },\n      display: '0'\n    }\n  }\n\n    drawGrid() {\n        const {ctx} = this.state;\n        ctx.strokeStyle = 'rgba(255, 255, 255, 0.2)';\n        ctx.fillStyle = '#9575cd';\n        ctx.fillRect(0, 0, boardSize, boardSize) // fillrect is a function, so has ()\n        for (var vertical = cellSize; vertical < boardSize; vertical += cellSize){\n          ctx.beginPath();\n          ctx.moveTo(vertical, 0);\n          ctx.lineTo(vertical, boardSize);\n          ctx.stroke();\n        }\n        for (var horizontal = cellSize; horizontal < boardSize; horizontal += cellSize){\n          ctx.beginPath();\n          ctx.moveTo(0, horizontal);\n          ctx.lineTo(boardSize ,horizontal);\n          ctx.stroke();\n        }\n    }\n\n    drawGrid2() {\n      const {ctx} = this.state;\n      ctx.strokeStyle = 'rgba(255, 255, 255, 0.01)'; // strokeStyle is a field, no ()\n      ctx.fillStyle = '#9575cd';\n      //ctx.fillRect(0, 0, boardSize, boardSize) // fillrect is a function, so has ()\n      for (var vertical = cellSize; vertical < boardSize; vertical += cellSize){\n        ctx.beginPath();\n        ctx.moveTo(vertical, 0);\n        ctx.lineTo(vertical, boardSize);\n        ctx.stroke();\n      }\n      for (var horizontal = cellSize; horizontal < boardSize; horizontal += cellSize){\n        ctx.beginPath();\n        ctx.moveTo(0, horizontal);\n        ctx.lineTo(boardSize, horizontal);\n        ctx.stroke();\n      }\n    }\n\n    drawSnake(){\n      const {ctx, snake} = this.state;\n      ctx.fillStyle = '#795548';\n      snake.body.forEach(cord => { // for loop through the snake's body, fill rect\n        ctx.fillRect(cord.x * cellSize, cord.y * cellSize, 1 * cellSize, 1 * cellSize);\n      })\n    }\n\n    drawBoard(){\n        const canvas = this.refs.gameBoard;\n        this.setState({\n          canvas: canvas,\n          ctx: canvas.getContext('2d')\n        }, function () {\n          this.drawGrid();\n          this.drawSnake();\n          this.drawFood();\n        })\n    }\n    \n    changeDirection (direction) {\n      let newState = Object.assign({}, this.state);\n      if (direction === 'up' || direction === 'w'){\n        newState.snake.direction = 'up';\n      } else if (direction === 'down' || direction === 's'){\n        newState.snake.direction = 'down';\n      } else if (direction === 'left' || direction === 'a'){\n        newState.snake.direction = 'left';\n      } else if (direction === 'right' || direction === 'd'){\n        newState.snake.direction = 'right';\n      }\n      this.setState(newState);\n      this.canvasMoveSnake();\n    }\n\n    canvasMoveSnake(){\n      const {ctx, snake} = this.state;\n      ctx.fillStyle = '#9575cd';\n      this.drawRect(snake.tail.x,snake.tail.y,1,1);\n      ctx.fillStyle = 'yellow';\n      this.drawRect(snake.head.x,snake.head.y,1,1);\n      if (snake.head.x === snake.food.x && snake.head.y === snake.food.y) {\n        this.addBody();\n        this.addscore();\n        this.drawFood();\n      }\n      if (snake.head.x === snake.livefood.x && snake.head.y === snake.livefood.y) {\n        this.addBody();\n        snake.lives += 1;\n        this.drawliveFood();\n      }\n      if (snake.alive === false && snake.running === false){\n        this.endGame();\n      }\n      this.drawGrid2();\n    }\n\n    drawRect(x, y, l, h) {\n      const {ctx} = this.state;\n      ctx.fillRect(x * cellSize, y * cellSize, l * cellSize, h * cellSize);\n    }\n    \n    componentDidMount () {\n        this.drawBoard();\n    } //as soon as the object is created, draw the board\n\n    addscore() {\n      let newState = Object.assign({}, this.state);\n      newState.snake.currentscore = newState.snake.currentscore + 1;\n      newState.display = newState.snake.currentscore;\n      this.setState(newState);\n    }\n\n    drawFood () {\n      const {ctx, snake} = this.state;\n      ctx.fillStyle = 'red';\n      var position = {\n        x: Math.floor(Math.random() * 30),\n        y: Math.floor(Math.random() * 30)\n      }\n      while(this.exists(position)){\n        position.x = Math.floor(Math.random() * 30);\n        position.y = Math.floor(Math.random() * 30);\n      }\n      snake.food = position;\n      this.setState({\n        snake:snake\n      })\n      this.drawRect(position.x, position.y,1,1);\n    }\n    \n    drawliveFood () {\n      const {ctx, snake} = this.state;\n      ctx.fillStyle = 'pink';\n      var position = {\n        x: Math.floor(Math.random() * 30),\n        y: Math.floor(Math.random() * 30)\n      }\n      while(this.exists(position)){\n        position.x = Math.floor(Math.random() * 30);\n        position.y = Math.floor(Math.random() * 30);\n      }\n      snake.food = position;\n      this.setState({\n        snake:snake\n      })\n      this.drawRect(position.x, position.y,1,1);\n    }\n\n    // if the position is on the snake's body, return true, otherwise false.\n    exists(position) {\n      const {snake} = this.state;\n      for (var i = 0; i < snake.currentscore; i++){\n        var cord = {\n          x: snake.body[i].x,\n          y: snake.body[i].y\n        }\n        if (position.x === cord.x && position.y === cord.y){\n          return true;\n        }\n      }\n      return false;\n    }\n    \n    addBody() {\n      const {snake} = this.state;\n      var newTail = {}\n      switch(snake.direction){\n        case 'up':\n          newTail = {x: snake.tail.x, y: snake.tail.y - 1}\n          break;\n        case 'down':\n          newTail = {x: snake.tail.x, y: snake.tail.y + 1}\n          break;\n        case 'left':\n          newTail = {x: snake.tail.x - 1, y: snake.tail.y}\n          break;\n        case 'right':\n          newTail = {x: snake.tail.x + 1, y: snake.tail.y}\n          break;\n        default:\n          break;\n      }\n      snake.body.push(newTail)\n      snake.tail = newTail;\n    }\n\n    endGame() {\n      const {ctx} = this.state;\n      let newState = Object.assign({}, this.state);\n      newState.snake.running = false;\n      newState.snake.alive = false;\n      this.setState(newState);\n      //Horizonal Lines\n      ctx.fillStyle = 'white';\n      this.drawRect(5,9,4,1);\n      this.drawRect(5,13,4,1);\n      this.drawRect(11,9,2,1);\n      this.drawRect(11,12,2,1);\n      this.drawRect(22,9,3,1);\n      this.drawRect(22,11,3,1);\n      this.drawRect(22,13,3,1);\n      this.drawRect(6,16,2,1);\n      this.drawRect(6,20,2,1);\n      this.drawRect(16,16,4,1);\n      this.drawRect(16,18,4,1);\n      this.drawRect(16,20,4,1);\n      this.drawRect(21,16,4,1);\n      this.drawRect(21,18,4,1);\n      this.drawRect(23,20,2,1);\n      //Vertical Lines\n      this.drawRect(5,10,1,3);\n      this.drawRect(10,10,1,4);\n      this.drawRect(13,10,1,4);\n      this.drawRect(15,9,1,5);\n      this.drawRect(19,9,1,5);\n      this.drawRect(21,9,1,5);\n      this.drawRect(5,17,1,3);\n      this.drawRect(8,17,1,3);\n      this.drawRect(10,16,1,3);\n      this.drawRect(14,16,1,3);\n      this.drawRect(16,16,1,5);\n      this.drawRect(21,16,1,5);\n      this.drawRect(24,16,1,3);\n      //Dots\n      this.drawRect(7,11,1,1);\n      this.drawRect(8,12,1,1);\n      this.drawRect(16,10,1,1);\n      this.drawRect(17,11,1,1);\n      this.drawRect(18,10,1,1);\n      this.drawRect(11,19,1,1);\n      this.drawRect(12,20,1,1);\n      this.drawRect(13,19,1,1);\n      this.drawRect(22,19,1,1);\n    }\n\n    resetBoard(){\n      this.setState(({\n          snake: {\n            head: {\n              x: 15,\n              y: 15\n            },\n            tail: {\n              x: 15,\n              y: 15\n            },\n            direction: '',\n            body: [{x:15,y:15}],\n            running: false,\n            alive: true,\n            speed: 2,\n            food: {},\n            currentscore: 0,\n            lives: 3\n          },\n          display: '0'\n      }))\n      this.drawBoard();\n    }\n\n    speedUp(){\n      let newState = Object.assign({}, this.state);\n      newState.snake.speed = this.state.snake.speed + 0.3;        \n      this.setState(newState);\n    }\n\n    speedDown(){\n      let newState = Object.assign({}, this.state);\n      if (this.state.snake.speed >= 1.3) {\n        newState.snake.speed = this.state.snake.speed - 0.3;\n      } else {\n        newState.snake.speed = this.state.snake.speed;\n        alert(\"This is the lowest speed!\")\n      }\n      this.setState(newState);\n    }\n\n    render() {\n        return (\n            <div id='gameContainer' className='container-fluid'>\n              {this.state.display}\n                <canvas id='gameBoard' ref=\"gameBoard\" width={boardSize} height={boardSize} />\n                  <KeyboardEventHandler\n                    handleKeys={['r', 'esc', '[', ']', 'space']}\n                    onKeyEvent={(key, e) => {\n                      if(key === 'r'){\n                        this.resetBoard();\n                      } else if (key === 'esc'){\n                        this.endGame();\n                      } else if (key === '['){\n                        this.speedDown();\n                      } else if (key === ']'){\n                        this.speedUp();\n                      } else if (key === 'space') {\n                        alert(\"Paused! Click the button below to continue :)\");\n                      }\n                    }}/>\n                    <Snake snake={this.state.snake}\n                    changeDirection={this.changeDirection.bind(this)}\n                    endGame={this.endGame.bind(this)}\n                    drawFood={this.drawFood.bind(this)}\n                    drawliveFood={this.drawFood.bind(this)}\n                  />\n            </div>\n        )\n    }\n}\n\nexport default Board;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/JasonWu/snake/src/Board.js\";\nimport React from 'react';\nconst boardSize = 720;\nconst cellSize = boardSize / 30;\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      snake: {\n        head: {\n          x: 15,\n          y: 15\n        },\n        tail: {\n          x: 15,\n          y: 15\n        },\n        direction: '',\n        body: [{\n          x: 15,\n          y: 15\n        }],\n        running: false,\n        alive: true,\n        speed: 1\n      }\n    };\n  }\n\n  drawGrid() {\n    const ctx = this.state.ctx; // create and set gradient\n    // var gradient = ctx.createLinearGradient(0, 0, boardSize, 0);\n    // gradient.addColorStop(\"0.1\", \"#e91e63\");\n    // gradient.addColorStop(\"0.3\", \"#FFC107\");\n    // gradient.addColorStop(\"0.5\", \"#8bc34a\");\n    // gradient.addColorStop(\"0.7\", \"#03a9f4\");\n    // gradient.addColorStop(\"0.9\", \"#ba68c8\");\n    // ctx.fillStyle = gradient;\n\n    ctx.strokeStyle = 'grey'; // strokeStyle is a field, no ()\n\n    ctx.fillStyle = '#9575cd';\n    ctx.fillRect(0, 0, boardSize, boardSize); // fillrect is a function, so has ()\n\n    for (var vertical = cellSize; vertical < boardSize; vertical += cellSize) {\n      ctx.beginPath();\n      ctx.moveTo(vertical, 0);\n      ctx.lineTo(vertical, boardSize);\n      ctx.stroke();\n    }\n\n    for (var horizontal = cellSize; horizontal < boardSize; horizontal += cellSize) {\n      ctx.beginPath();\n      ctx.moveTo(0, horizontal);\n      ctx.lineTo(boardSize, horizontal);\n      ctx.stroke();\n    }\n  }\n\n  drawSnake() {\n    const _this$state = this.state,\n          ctx = _this$state.ctx,\n          snake = _this$state.snake;\n    ctx.fillStyle = 'purple';\n    snake.body.forEach(cord => {\n      // for loop through the snake's body, fill rect\n      ctx.fillRect(cord.x * cellSize, cord.y * cellSize, 1 * cellSize, 1 * cellSize);\n    });\n  }\n\n  drawBoard() {\n    const canvas = this.refs.gameBoard;\n    this.setState({\n      canvas: canvas,\n      ctx: canvas.getContext('2d')\n    }, function () {\n      this.drawGrid();\n      this.drawSnake();\n    });\n  }\n\n  componentDidMount() {\n    this.drawBoard();\n  } //as sooon as the object is created, draw the board\n\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"gameContainer\",\n      className: \"container-fluid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(\"canvas\", {\n      id: \"gameBoard\",\n      ref: \"gameBoard\",\n      width: boardSize,\n      height: boardSize,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/JasonWu/snake/src/Board.js"],"names":["React","boardSize","cellSize","Board","Component","constructor","props","state","snake","head","x","y","tail","direction","body","running","alive","speed","drawGrid","ctx","strokeStyle","fillStyle","fillRect","vertical","beginPath","moveTo","lineTo","stroke","horizontal","drawSnake","forEach","cord","drawBoard","canvas","refs","gameBoard","setState","getContext","componentDidMount","render"],"mappings":"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","sourcesContent":["import React from 'react'\n\nconst boardSize = 720;\nconst cellSize = boardSize / 30;\n\nclass Board extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      snake: {\n        head: {\n          x: 15,\n          y: 15\n        },\n        tail: {\n          x: 15,\n          y: 15\n        },\n        direction: '',\n        body: [{x:15,y:15}],\n        running: false,\n        alive: true,\n        speed: 1\n      }\n    }\n  }\n\n    drawGrid() {\n        const {ctx} = this.state;\n        // create and set gradient\n        // var gradient = ctx.createLinearGradient(0, 0, boardSize, 0);\n        // gradient.addColorStop(\"0.1\", \"#e91e63\");\n        // gradient.addColorStop(\"0.3\", \"#FFC107\");\n        // gradient.addColorStop(\"0.5\", \"#8bc34a\");\n        // gradient.addColorStop(\"0.7\", \"#03a9f4\");\n        // gradient.addColorStop(\"0.9\", \"#ba68c8\");\n        // ctx.fillStyle = gradient;\n        ctx.strokeStyle = 'grey'; // strokeStyle is a field, no ()\n        ctx.fillStyle = '#9575cd';\n        ctx.fillRect(0, 0, boardSize, boardSize) // fillrect is a function, so has ()\n        for (var vertical = cellSize; vertical < boardSize; vertical += cellSize){\n          ctx.beginPath();\n          ctx.moveTo(vertical, 0);\n          ctx.lineTo(vertical, boardSize);\n          ctx.stroke();\n        }\n      \n        for (var horizontal = cellSize; horizontal < boardSize; horizontal += cellSize){\n          ctx.beginPath();\n          ctx.moveTo(0, horizontal);\n          ctx.lineTo(boardSize ,horizontal);\n          ctx.stroke();\n        }\n    }\n\n    drawSnake(){\n      const {ctx, snake} = this.state;\n      ctx.fillStyle = 'purple';\n      snake.body.forEach(cord => { // for loop through the snake's body, fill rect\n        ctx.fillRect(cord.x * cellSize, cord.y * cellSize, 1 * cellSize, 1 * cellSize);\n      })\n    }\n\n    drawBoard(){\n        const canvas = this.refs.gameBoard\n        this.setState({\n          canvas: canvas,\n          ctx: canvas.getContext('2d')\n        }, function () {\n          this.drawGrid();\n          this.drawSnake();\n        })\n    }\n    \n    componentDidMount () {\n        this.drawBoard();\n    } //as sooon as the object is created, draw the board\n\n    render() {\n        return (\n            <div id='gameContainer' className='container-fluid'>\n                <canvas id='gameBoard' ref=\"gameBoard\" width={boardSize} height={boardSize} />\n            </div>\n        )\n    }\n}\n\nexport default Board;"]},"metadata":{},"sourceType":"module"}
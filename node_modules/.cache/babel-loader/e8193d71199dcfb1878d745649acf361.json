{"ast":null,"code":"var _jsxFileName = \"/Users/JasonWu/snake/src/Board.js\";\nimport React from 'react';\nimport KeyboardEventHandler from 'react-keyboard-event-handler';\nimport Snake from './snake';\nconst boardSize = 720;\nconst cellSize = boardSize / 30;\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      snake: {\n        head: {\n          x: 15,\n          y: 15\n        },\n        tail: {\n          x: 15,\n          y: 15\n        },\n        direction: '',\n        body: [{\n          x: 15,\n          y: 15\n        }],\n        running: false,\n        alive: true,\n        speed: 1\n      }\n    };\n  }\n\n  drawGrid() {\n    const ctx = this.state.ctx; // create and set gradient\n    // var gradient = ctx.createLinearGradient(0, 0, boardSize, 0);\n    // gradient.addColorStop(\"0.1\", \"#e91e63\");\n    // gradient.addColorStop(\"0.3\", \"#FFC107\");\n    // gradient.addColorStop(\"0.5\", \"#8bc34a\");\n    // gradient.addColorStop(\"0.7\", \"#03a9f4\");\n    // gradient.addColorStop(\"0.9\", \"#ba68c8\");\n    // ctx.fillStyle = gradient;\n\n    ctx.strokeStyle = '#bbdefb'; // strokeStyle is a field, no ()\n\n    ctx.fillStyle = '#9575cd';\n    ctx.fillRect(0, 0, boardSize, boardSize); // fillrect is a function, so has ()\n\n    for (var vertical = cellSize; vertical < boardSize; vertical += cellSize) {\n      ctx.beginPath();\n      ctx.moveTo(vertical, 0);\n      ctx.lineTo(vertical, boardSize);\n      ctx.stroke();\n    }\n\n    for (var horizontal = cellSize; horizontal < boardSize; horizontal += cellSize) {\n      ctx.beginPath();\n      ctx.moveTo(0, horizontal);\n      ctx.lineTo(boardSize, horizontal);\n      ctx.stroke();\n    }\n  }\n\n  drawSnake() {\n    const _this$state = this.state,\n          ctx = _this$state.ctx,\n          snake = _this$state.snake;\n    ctx.fillStyle = '#795548';\n    snake.body.forEach(cord => {\n      // for loop through the snake's body, fill rect\n      ctx.fillRect(cord.x * cellSize, cord.y * cellSize, 1 * cellSize, 1 * cellSize);\n    });\n  }\n\n  drawBoard() {\n    const canvas = this.refs.gameBoard;\n    this.setState({\n      canvas: canvas,\n      ctx: canvas.getContext('2d')\n    }, function () {\n      this.drawGrid();\n      this.drawSnake();\n    });\n  }\n\n  changeDirection(direction) {\n    let newState = Object.assign({}, this.state);\n    newState.snake.direction = direction;\n    this.setState(newState);\n    this.canvasMoveSnake();\n  }\n\n  canvasMoveSnake() {\n    const _this$state2 = this.state,\n          ctx = _this$state2.ctx,\n          snake = _this$state2.snake;\n    ctx.fillStyle = 'black';\n    this.drawRect(snake.tail.x, snake.tail.y, 1, 1);\n    ctx.fillStyle = 'green';\n    this.drawRect(snake.head.x, snake.head.y, 1, 1);\n  }\n\n  drawRect(x, y, l, h) {\n    const ctx = this.state.ctx;\n    ctx.fillRect(x * cellSize, y * cellSize, l * cellSize, h * cellSize);\n  }\n\n  componentDidMount() {\n    this.drawBoard();\n  } //as soon as the object is created, draw the board\n\n\n  run() {\n    this.props.snake.running = true;\n    var running = setInterval(() => {\n      const snake = this.props.snake;\n\n      switch (snake.direction) {\n        case 'up':\n          snake.head.y -= 1;\n          break;\n\n        case 'down':\n          snake.head.y += 1;\n          break;\n\n        case 'left':\n          snake.head.x -= 1;\n          break;\n\n        case 'right':\n          snake.head.x += 1;\n          break;\n\n        default:\n          break;\n      }\n\n      if (this.props.snake.running === false) {\n        clearInterval(running);\n      } else if (snake.head.x > 29 || snake.head.y > 29 || snake.head.x < 0 || snake.head.y < 0) {\n        snake.running = false;\n        snake.alive = false;\n        clearInterval(running);\n      }\n\n      this.props.changeDirection(snake.direction);\n    }, 200 / this.props.snake.speed);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"gameContainer\",\n      className: \"container-fluid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(\"canvas\", {\n      id: \"gameBoard\",\n      ref: \"gameBoard\",\n      width: boardSize,\n      height: boardSize,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }), React.createElement(KeyboardEventHandler, {\n      handleKeys: ['left', 'up', 'right', 'down', 'space'],\n      onKeyEvent: (key, e) => {\n        if (!this.props.snake.running && this.props.snake.alive) {\n          this.run();\n        }\n\n        this.props.changeDirection(key);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }), React.createElement(Snake, {\n      snake: this.state.snake,\n      changeDirection: this.changeDirection.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/JasonWu/snake/src/Board.js"],"names":["React","KeyboardEventHandler","Snake","boardSize","cellSize","Board","Component","constructor","props","state","snake","head","x","y","tail","direction","body","running","alive","speed","drawGrid","ctx","strokeStyle","fillStyle","fillRect","vertical","beginPath","moveTo","lineTo","stroke","horizontal","drawSnake","forEach","cord","drawBoard","canvas","refs","gameBoard","setState","getContext","changeDirection","newState","Object","assign","canvasMoveSnake","drawRect","l","h","componentDidMount","run","setInterval","clearInterval","render","key","e","bind"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,oBAAP,MAAiC,8BAAjC;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,MAAMC,SAAS,GAAG,GAAlB;AACA,MAAMC,QAAQ,GAAGD,SAAS,GAAG,EAA7B;;AAEA,MAAME,KAAN,SAAoBL,KAAK,CAACM,SAA1B,CAAmC;AACjCC,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE;AACLC,QAAAA,IAAI,EAAE;AACJC,UAAAA,CAAC,EAAE,EADC;AAEJC,UAAAA,CAAC,EAAE;AAFC,SADD;AAKLC,QAAAA,IAAI,EAAE;AACJF,UAAAA,CAAC,EAAE,EADC;AAEJC,UAAAA,CAAC,EAAE;AAFC,SALD;AASLE,QAAAA,SAAS,EAAE,EATN;AAULC,QAAAA,IAAI,EAAE,CAAC;AAACJ,UAAAA,CAAC,EAAC,EAAH;AAAMC,UAAAA,CAAC,EAAC;AAAR,SAAD,CAVD;AAWLI,QAAAA,OAAO,EAAE,KAXJ;AAYLC,QAAAA,KAAK,EAAE,IAZF;AAaLC,QAAAA,KAAK,EAAE;AAbF;AADI,KAAb;AAiBD;;AAECC,EAAAA,QAAQ,GAAG;AAAA,UACAC,GADA,GACO,KAAKZ,KADZ,CACAY,GADA,EAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,IAAAA,GAAG,CAACC,WAAJ,GAAkB,SAAlB,CAVO,CAUsB;;AAC7BD,IAAAA,GAAG,CAACE,SAAJ,GAAgB,SAAhB;AACAF,IAAAA,GAAG,CAACG,QAAJ,CAAa,CAAb,EAAgB,CAAhB,EAAmBrB,SAAnB,EAA8BA,SAA9B,EAZO,CAYkC;;AACzC,SAAK,IAAIsB,QAAQ,GAAGrB,QAApB,EAA8BqB,QAAQ,GAAGtB,SAAzC,EAAoDsB,QAAQ,IAAIrB,QAAhE,EAAyE;AACvEiB,MAAAA,GAAG,CAACK,SAAJ;AACAL,MAAAA,GAAG,CAACM,MAAJ,CAAWF,QAAX,EAAqB,CAArB;AACAJ,MAAAA,GAAG,CAACO,MAAJ,CAAWH,QAAX,EAAqBtB,SAArB;AACAkB,MAAAA,GAAG,CAACQ,MAAJ;AACD;;AAED,SAAK,IAAIC,UAAU,GAAG1B,QAAtB,EAAgC0B,UAAU,GAAG3B,SAA7C,EAAwD2B,UAAU,IAAI1B,QAAtE,EAA+E;AAC7EiB,MAAAA,GAAG,CAACK,SAAJ;AACAL,MAAAA,GAAG,CAACM,MAAJ,CAAW,CAAX,EAAcG,UAAd;AACAT,MAAAA,GAAG,CAACO,MAAJ,CAAWzB,SAAX,EAAsB2B,UAAtB;AACAT,MAAAA,GAAG,CAACQ,MAAJ;AACD;AACJ;;AAEDE,EAAAA,SAAS,GAAE;AAAA,wBACY,KAAKtB,KADjB;AAAA,UACFY,GADE,eACFA,GADE;AAAA,UACGX,KADH,eACGA,KADH;AAETW,IAAAA,GAAG,CAACE,SAAJ,GAAgB,SAAhB;AACAb,IAAAA,KAAK,CAACM,IAAN,CAAWgB,OAAX,CAAmBC,IAAI,IAAI;AAAE;AAC3BZ,MAAAA,GAAG,CAACG,QAAJ,CAAaS,IAAI,CAACrB,CAAL,GAASR,QAAtB,EAAgC6B,IAAI,CAACpB,CAAL,GAAST,QAAzC,EAAmD,IAAIA,QAAvD,EAAiE,IAAIA,QAArE;AACD,KAFD;AAGD;;AAED8B,EAAAA,SAAS,GAAE;AACP,UAAMC,MAAM,GAAG,KAAKC,IAAL,CAAUC,SAAzB;AACA,SAAKC,QAAL,CAAc;AACZH,MAAAA,MAAM,EAAEA,MADI;AAEZd,MAAAA,GAAG,EAAEc,MAAM,CAACI,UAAP,CAAkB,IAAlB;AAFO,KAAd,EAGG,YAAY;AACb,WAAKnB,QAAL;AACA,WAAKW,SAAL;AACD,KAND;AAOH;;AAEDS,EAAAA,eAAe,CAAEzB,SAAF,EAAa;AAC1B,QAAI0B,QAAQ,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKlC,KAAvB,CAAf;AACAgC,IAAAA,QAAQ,CAAC/B,KAAT,CAAeK,SAAf,GAA2BA,SAA3B;AACA,SAAKuB,QAAL,CAAcG,QAAd;AACA,SAAKG,eAAL;AACD;;AAEDA,EAAAA,eAAe,GAAE;AAAA,yBACM,KAAKnC,KADX;AAAA,UACRY,GADQ,gBACRA,GADQ;AAAA,UACHX,KADG,gBACHA,KADG;AAEfW,IAAAA,GAAG,CAACE,SAAJ,GAAgB,OAAhB;AACA,SAAKsB,QAAL,CAAcnC,KAAK,CAACI,IAAN,CAAWF,CAAzB,EAA2BF,KAAK,CAACI,IAAN,CAAWD,CAAtC,EAAwC,CAAxC,EAA0C,CAA1C;AACAQ,IAAAA,GAAG,CAACE,SAAJ,GAAgB,OAAhB;AACA,SAAKsB,QAAL,CAAcnC,KAAK,CAACC,IAAN,CAAWC,CAAzB,EAA2BF,KAAK,CAACC,IAAN,CAAWE,CAAtC,EAAwC,CAAxC,EAA0C,CAA1C;AACD;;AAEDgC,EAAAA,QAAQ,CAACjC,CAAD,EAAIC,CAAJ,EAAOiC,CAAP,EAAUC,CAAV,EAAa;AAAA,UACZ1B,GADY,GACL,KAAKZ,KADA,CACZY,GADY;AAEnBA,IAAAA,GAAG,CAACG,QAAJ,CAAaZ,CAAC,GAAGR,QAAjB,EAA2BS,CAAC,GAAGT,QAA/B,EAAyC0C,CAAC,GAAG1C,QAA7C,EAAuD2C,CAAC,GAAG3C,QAA3D;AACD;;AAED4C,EAAAA,iBAAiB,GAAI;AACjB,SAAKd,SAAL;AACH,GA3F8B,CA2F7B;;;AAEFe,EAAAA,GAAG,GAAG;AACJ,SAAKzC,KAAL,CAAWE,KAAX,CAAiBO,OAAjB,GAA2B,IAA3B;AACA,QAAIA,OAAO,GAAGiC,WAAW,CAAC,MAAM;AAC5B,YAAMxC,KAAK,GAAG,KAAKF,KAAL,CAAWE,KAAzB;;AACA,cAAOA,KAAK,CAACK,SAAb;AACI,aAAK,IAAL;AACEL,UAAAA,KAAK,CAACC,IAAN,CAAWE,CAAX,IAAgB,CAAhB;AACA;;AACF,aAAK,MAAL;AACEH,UAAAA,KAAK,CAACC,IAAN,CAAWE,CAAX,IAAgB,CAAhB;AACA;;AACE,aAAK,MAAL;AACJH,UAAAA,KAAK,CAACC,IAAN,CAAWC,CAAX,IAAgB,CAAhB;AACE;;AACF,aAAK,OAAL;AACEF,UAAAA,KAAK,CAACC,IAAN,CAAWC,CAAX,IAAgB,CAAhB;AACA;;AACF;AACA;AAdJ;;AAiBA,UAAG,KAAKJ,KAAL,CAAWE,KAAX,CAAiBO,OAAjB,KAA6B,KAAhC,EAAsC;AAClCkC,QAAAA,aAAa,CAAClC,OAAD,CAAb;AACH,OAFD,MAGK,IAAIP,KAAK,CAACC,IAAN,CAAWC,CAAX,GAAe,EAAf,IAAqBF,KAAK,CAACC,IAAN,CAAWE,CAAX,GAAe,EAApC,IAA0CH,KAAK,CAACC,IAAN,CAAWC,CAAX,GAAe,CAAzD,IAA8DF,KAAK,CAACC,IAAN,CAAWE,CAAX,GAAe,CAAjF,EAAoF;AACvFH,QAAAA,KAAK,CAACO,OAAN,GAAgB,KAAhB;AACAP,QAAAA,KAAK,CAACQ,KAAN,GAAc,KAAd;AACAiC,QAAAA,aAAa,CAAClC,OAAD,CAAb;AACD;;AAED,WAAKT,KAAL,CAAWgC,eAAX,CAA2B9B,KAAK,CAACK,SAAjC;AACH,KA7BwB,EA6BtB,MAAM,KAAKP,KAAL,CAAWE,KAAX,CAAiBS,KA7BD,CAAzB;AA8BD;;AAEDiC,EAAAA,MAAM,GAAG;AACL,WACI;AAAK,MAAA,EAAE,EAAC,eAAR;AAAwB,MAAA,SAAS,EAAC,iBAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAQ,MAAA,EAAE,EAAC,WAAX;AAAuB,MAAA,GAAG,EAAC,WAA3B;AAAuC,MAAA,KAAK,EAAEjD,SAA9C;AAAyD,MAAA,MAAM,EAAEA,SAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAGI,oBAAC,oBAAD;AACE,MAAA,UAAU,EAAE,CAAC,MAAD,EAAS,IAAT,EAAe,OAAf,EAAwB,MAAxB,EAAgC,OAAhC,CADd;AAEE,MAAA,UAAU,EAAE,CAACkD,GAAD,EAAMC,CAAN,KAAY;AACtB,YAAI,CAAC,KAAK9C,KAAL,CAAWE,KAAX,CAAiBO,OAAlB,IAA6B,KAAKT,KAAL,CAAWE,KAAX,CAAiBQ,KAAlD,EAAyD;AACvD,eAAK+B,GAAL;AACD;;AACD,aAAKzC,KAAL,CAAWgC,eAAX,CAA2Ba,GAA3B;AACD,OAPH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,EAWM,oBAAC,KAAD;AAAO,MAAA,KAAK,EAAE,KAAK5C,KAAL,CAAWC,KAAzB;AACE,MAAA,eAAe,EAAE,KAAK8B,eAAL,CAAqBe,IAArB,CAA0B,IAA1B,CADnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAXN,CADJ;AAiBH;;AAjJ8B;;AAoJnC,eAAelD,KAAf","sourcesContent":["import React from 'react'\nimport KeyboardEventHandler from 'react-keyboard-event-handler'\nimport Snake from './snake'\nconst boardSize = 720;\nconst cellSize = boardSize / 30;\n\nclass Board extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      snake: {\n        head: {\n          x: 15,\n          y: 15\n        },\n        tail: {\n          x: 15,\n          y: 15\n        },\n        direction: '',\n        body: [{x:15,y:15}],\n        running: false,\n        alive: true,\n        speed: 1\n      }\n    }\n  }\n\n    drawGrid() {\n        const {ctx} = this.state;\n        // create and set gradient\n        // var gradient = ctx.createLinearGradient(0, 0, boardSize, 0);\n        // gradient.addColorStop(\"0.1\", \"#e91e63\");\n        // gradient.addColorStop(\"0.3\", \"#FFC107\");\n        // gradient.addColorStop(\"0.5\", \"#8bc34a\");\n        // gradient.addColorStop(\"0.7\", \"#03a9f4\");\n        // gradient.addColorStop(\"0.9\", \"#ba68c8\");\n        // ctx.fillStyle = gradient;\n        ctx.strokeStyle = '#bbdefb'; // strokeStyle is a field, no ()\n        ctx.fillStyle = '#9575cd';\n        ctx.fillRect(0, 0, boardSize, boardSize) // fillrect is a function, so has ()\n        for (var vertical = cellSize; vertical < boardSize; vertical += cellSize){\n          ctx.beginPath();\n          ctx.moveTo(vertical, 0);\n          ctx.lineTo(vertical, boardSize);\n          ctx.stroke();\n        }\n      \n        for (var horizontal = cellSize; horizontal < boardSize; horizontal += cellSize){\n          ctx.beginPath();\n          ctx.moveTo(0, horizontal);\n          ctx.lineTo(boardSize ,horizontal);\n          ctx.stroke();\n        }\n    }\n\n    drawSnake(){\n      const {ctx, snake} = this.state;\n      ctx.fillStyle = '#795548';\n      snake.body.forEach(cord => { // for loop through the snake's body, fill rect\n        ctx.fillRect(cord.x * cellSize, cord.y * cellSize, 1 * cellSize, 1 * cellSize);\n      })\n    }\n\n    drawBoard(){\n        const canvas = this.refs.gameBoard\n        this.setState({\n          canvas: canvas,\n          ctx: canvas.getContext('2d')\n        }, function () {\n          this.drawGrid();\n          this.drawSnake();\n        })\n    }\n    \n    changeDirection (direction) {\n      let newState = Object.assign({}, this.state);\n      newState.snake.direction = direction;\n      this.setState(newState);\n      this.canvasMoveSnake();\n    }\n\n    canvasMoveSnake(){\n      const {ctx, snake} = this.state\n      ctx.fillStyle = 'black';\n      this.drawRect(snake.tail.x,snake.tail.y,1,1);\n      ctx.fillStyle = 'green';\n      this.drawRect(snake.head.x,snake.head.y,1,1);\n    }\n\n    drawRect(x, y, l, h) {\n      const {ctx} = this.state\n      ctx.fillRect(x * cellSize, y * cellSize, l * cellSize, h * cellSize);\n    }\n    \n    componentDidMount () {\n        this.drawBoard();\n    } //as soon as the object is created, draw the board\n\n    run() {\n      this.props.snake.running = true;\n      var running = setInterval(() => {\n          const snake = this.props.snake;\n          switch(snake.direction){\n              case 'up':\n                snake.head.y -= 1;\n                break;\n              case 'down':\n                snake.head.y += 1;\n                break;\n                  case 'left':\n              snake.head.x -= 1;\n                break;\n              case 'right':\n                snake.head.x += 1;\n                break;\n              default:\n              break;\n          }\n\n          if(this.props.snake.running === false){\n              clearInterval(running)\n          }\n          else if (snake.head.x > 29 || snake.head.y > 29 || snake.head.x < 0 || snake.head.y < 0) {\n            snake.running = false\n            snake.alive = false\n            clearInterval(running);\n          }\n\n          this.props.changeDirection(snake.direction);\n      }, 200 / this.props.snake.speed);\n    }\n\n    render() {\n        return (\n            <div id='gameContainer' className='container-fluid'>\n                <canvas id='gameBoard' ref=\"gameBoard\" width={boardSize} height={boardSize} />\n\n                <KeyboardEventHandler\n                  handleKeys={['left', 'up', 'right', 'down', 'space']}\n                  onKeyEvent={(key, e) => {\n                    if (!this.props.snake.running && this.props.snake.alive ){\n                      this.run();\n                    }\n                    this.props.changeDirection(key);\n                  }} />\n                  <Snake snake={this.state.snake}\n                    changeDirection={this.changeDirection.bind(this)}\n                  />\n            </div>\n        )\n    }\n}\n\nexport default Board;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/JasonWu/snake/src/Board.js\";\nimport React from 'react';\nconst boardSize = 720;\nconst cellSize = boardSize / 30;\n\nclass Board extends React.Component {\n  drawGrid() {\n    const ctx = this.state.ctx; // create and set gradient\n\n    var gradient = ctx.createLinearGradient(0, 0, boardSize, 0);\n    gradient.addColorStop(\"0.1\", \"#e91e63\");\n    gradient.addColorStop(\"0.3\", \"#FFC107\");\n    gradient.addColorStop(\"0.5\", \"#8bc34a\");\n    gradient.addColorStop(\"0.7\", \"#03a9f4\");\n    gradient.addColorStop(\"0.9\", \"#ba68c8\");\n    ctx.strokeStyle = 'grey'; // strokeStyle is a field, no ()\n    //ctx.fillStyle = '#cee5b3';\n\n    ctx.fillRect(0, 0, boardSize, boardSize); // fillrect is a function, so has ()\n\n    for (var vertical = cellSize; vertical < boardSize; vertical += cellSize) {\n      ctx.beginPath();\n      ctx.moveTo(vertical, 0);\n      ctx.lineTo(vertical, boardSize);\n      ctx.stroke();\n    }\n\n    for (var horizontal = cellSize; horizontal < boardSize; horizontal += cellSize) {\n      ctx.beginPath();\n      ctx.moveTo(0, horizontal);\n      ctx.lineTo(boardSize, horizontal);\n      ctx.stroke();\n    }\n  }\n\n  drawBoard() {\n    const canvas = this.refs.gameBoard;\n    this.setState({\n      canvas: canvas,\n      ctx: canvas.getContext('2d')\n    }, function () {\n      this.drawGrid();\n    });\n  }\n\n  componentDidMount() {\n    this.drawBoard();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"gameContainer\",\n      className: \"container-fluid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(\"canvas\", {\n      id: \"gameBoard\",\n      ref: \"gameBoard\",\n      width: boardSize,\n      height: boardSize,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/JasonWu/snake/src/Board.js"],"names":["React","boardSize","cellSize","Board","Component","drawGrid","ctx","state","gradient","createLinearGradient","addColorStop","strokeStyle","fillRect","vertical","beginPath","moveTo","lineTo","stroke","horizontal","drawBoard","canvas","refs","gameBoard","setState","getContext","componentDidMount","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,SAAS,GAAG,GAAlB;AACA,MAAMC,QAAQ,GAAGD,SAAS,GAAG,EAA7B;;AAEA,MAAME,KAAN,SAAoBH,KAAK,CAACI,SAA1B,CAAmC;AAC/BC,EAAAA,QAAQ,GAAG;AAAA,UACAC,GADA,GACO,KAAKC,KADZ,CACAD,GADA,EAET;;AACE,QAAIE,QAAQ,GAAGF,GAAG,CAACG,oBAAJ,CAAyB,CAAzB,EAA4B,CAA5B,EAA+BR,SAA/B,EAA0C,CAA1C,CAAf;AACAO,IAAAA,QAAQ,CAACE,YAAT,CAAsB,KAAtB,EAA6B,SAA7B;AACAF,IAAAA,QAAQ,CAACE,YAAT,CAAsB,KAAtB,EAA6B,SAA7B;AACAF,IAAAA,QAAQ,CAACE,YAAT,CAAsB,KAAtB,EAA6B,SAA7B;AACAF,IAAAA,QAAQ,CAACE,YAAT,CAAsB,KAAtB,EAA6B,SAA7B;AACAF,IAAAA,QAAQ,CAACE,YAAT,CAAsB,KAAtB,EAA6B,SAA7B;AACAJ,IAAAA,GAAG,CAACK,WAAJ,GAAkB,MAAlB,CATO,CASmB;AAC1B;;AACAL,IAAAA,GAAG,CAACM,QAAJ,CAAa,CAAb,EAAgB,CAAhB,EAAmBX,SAAnB,EAA8BA,SAA9B,EAXO,CAWkC;;AACzC,SAAK,IAAIY,QAAQ,GAAGX,QAApB,EAA8BW,QAAQ,GAAGZ,SAAzC,EAAoDY,QAAQ,IAAIX,QAAhE,EAAyE;AACvEI,MAAAA,GAAG,CAACQ,SAAJ;AACAR,MAAAA,GAAG,CAACS,MAAJ,CAAWF,QAAX,EAAqB,CAArB;AACAP,MAAAA,GAAG,CAACU,MAAJ,CAAWH,QAAX,EAAqBZ,SAArB;AACAK,MAAAA,GAAG,CAACW,MAAJ;AACD;;AAED,SAAK,IAAIC,UAAU,GAAGhB,QAAtB,EAAgCgB,UAAU,GAAGjB,SAA7C,EAAwDiB,UAAU,IAAIhB,QAAtE,EAA+E;AAC7EI,MAAAA,GAAG,CAACQ,SAAJ;AACAR,MAAAA,GAAG,CAACS,MAAJ,CAAW,CAAX,EAAcG,UAAd;AACAZ,MAAAA,GAAG,CAACU,MAAJ,CAAWf,SAAX,EAAsBiB,UAAtB;AACAZ,MAAAA,GAAG,CAACW,MAAJ;AACD;AACJ;;AAEDE,EAAAA,SAAS,GAAE;AACP,UAAMC,MAAM,GAAG,KAAKC,IAAL,CAAUC,SAAzB;AACA,SAAKC,QAAL,CAAc;AACZH,MAAAA,MAAM,EAAEA,MADI;AAEZd,MAAAA,GAAG,EAAEc,MAAM,CAACI,UAAP,CAAkB,IAAlB;AAFO,KAAd,EAGG,YAAY;AACb,WAAKnB,QAAL;AACD,KALD;AAMH;;AAEDoB,EAAAA,iBAAiB,GAAI;AACjB,SAAKN,SAAL;AACH;;AAEDO,EAAAA,MAAM,GAAG;AACL,WACI;AAAK,MAAA,EAAE,EAAC,eAAR;AAAwB,MAAA,SAAS,EAAC,iBAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAQ,MAAA,EAAE,EAAC,WAAX;AAAuB,MAAA,GAAG,EAAC,WAA3B;AAAuC,MAAA,KAAK,EAAEzB,SAA9C;AAAyD,MAAA,MAAM,EAAEA,SAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ;AAKH;;AAhD8B;;AAmDnC,eAAeE,KAAf","sourcesContent":["import React from 'react'\n\nconst boardSize = 720;\nconst cellSize = boardSize / 30;\n\nclass Board extends React.Component{\n    drawGrid() {\n        const {ctx} = this.state\n      // create and set gradient\n        var gradient = ctx.createLinearGradient(0, 0, boardSize, 0);\n        gradient.addColorStop(\"0.1\", \"#e91e63\");\n        gradient.addColorStop(\"0.3\", \"#FFC107\");\n        gradient.addColorStop(\"0.5\", \"#8bc34a\");\n        gradient.addColorStop(\"0.7\", \"#03a9f4\");\n        gradient.addColorStop(\"0.9\", \"#ba68c8\");\n        ctx.strokeStyle = 'grey'; // strokeStyle is a field, no ()\n        //ctx.fillStyle = '#cee5b3';\n        ctx.fillRect(0, 0, boardSize, boardSize) // fillrect is a function, so has ()\n        for (var vertical = cellSize; vertical < boardSize; vertical += cellSize){\n          ctx.beginPath();\n          ctx.moveTo(vertical, 0);\n          ctx.lineTo(vertical, boardSize);\n          ctx.stroke();\n        }\n      \n        for (var horizontal = cellSize; horizontal < boardSize; horizontal += cellSize){\n          ctx.beginPath();\n          ctx.moveTo(0, horizontal);\n          ctx.lineTo(boardSize ,horizontal);\n          ctx.stroke();\n        }\n    }\n    \n    drawBoard(){\n        const canvas = this.refs.gameBoard\n        this.setState({\n          canvas: canvas,\n          ctx: canvas.getContext('2d')\n        }, function () {\n          this.drawGrid();\n        })\n    }\n    \n    componentDidMount () {\n        this.drawBoard();\n    }\n\n    render() {\n        return (\n            <div id='gameContainer' className='container-fluid'>\n                <canvas id='gameBoard' ref=\"gameBoard\" width={boardSize} height={boardSize} />\n            </div>\n        )\n    }\n}\n\nexport default Board;"]},"metadata":{},"sourceType":"module"}
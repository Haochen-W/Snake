{"map":"{\"version\":3,\"sources\":[\"/Users/JasonWu/snake/src/snake.js\",\"/Users/JasonWu/snake/src/Board.js\",\"/Users/JasonWu/snake/src/App.js\",\"/Users/JasonWu/snake/src/serviceWorker.js\",\"/Users/JasonWu/snake/src/index.js\"],\"names\":[\"Snake\",\"snake\",\"this\",\"props\",\"body\",\"some\",\"cord\",\"_\",\"isEqual\",\"head\",\"tail\",\"_this\",\"running\",\"setInterval\",\"direction\",\"y\",\"x\",\"clearInterval\",\"selfCollide\",\"lives\",\"alive\",\"alert\",\"revive\",\"newCell\",\"push\",\"splice\",\"changeDirection\",\"speed\",\"_this2\",\"react_default\",\"a\",\"createElement\",\"id\",\"react_keyboard_event_handler_default\",\"handleKeys\",\"onKeyEvent\",\"key\",\"e\",\"endGame\",\"run\",\"React\",\"Component\",\"Board\",\"Object\",\"classCallCheck\",\"possibleConstructorReturn\",\"getPrototypeOf\",\"call\",\"state\",\"food\",\"livefood\",\"livefoodeaten\",\"currentscore\",\"display\",\"ctx\",\"strokeStyle\",\"fillStyle\",\"fillRect\",\"vertical\",\"boardSize\",\"beginPath\",\"moveTo\",\"lineTo\",\"stroke\",\"horizontal\",\"_this$state\",\"forEach\",\"canvas\",\"refs\",\"gameBoard\",\"setState\",\"getContext\",\"drawGrid\",\"drawSnake\",\"drawFood\",\"newState\",\"assign\",\"canvasMoveSnake\",\"_this$state2\",\"drawRect\",\"addBody\",\"addscore\",\"addlive\",\"drawGrid2\",\"l\",\"h\",\"drawBoard\",\"_this$state3\",\"position\",\"Math\",\"floor\",\"random\",\"exists\",\"drawliveFood\",\"_this$state4\",\"foodeaten\",\"i\",\"newTail\",\"length\",\"className\",\"ref\",\"width\",\"height\",\"resetBoard\",\"speedDown\",\"speedUp\",\"src_snake\",\"bind\",\"App\",\"document\",\"title\",\"src_Board\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"ReactDOM\",\"render\",\"src_App\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"then\",\"registration\",\"unregister\"],\"mappings\":\"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\",\"sourcesContent\":[\"import React from 'react';\\nimport KeyboardEventHandler from 'react-keyboard-event-handler'\\nimport _ from 'lodash'\\n\\nclass Snake extends React.Component{\\n    selfCollide() {\\n      const snake = this.props.snake;\\n      return snake.body.some(cord => _.isEqual(cord, snake.head)) || _.isEqual(snake.head, snake.tail)\\n    }\\n    run() {\\n        this.props.snake.running = true;\\n        var running = setInterval(() => {\\n            const snake = this.props.snake;\\n            switch(snake.direction){\\n                case 'up':\\n                  snake.head.y -= 1;\\n                  break;\\n                case 'down':\\n                  snake.head.y += 1;\\n                  break;\\n                case 'left':\\n                  snake.head.x -= 1;\\n                  break;\\n                case 'right':\\n                  snake.head.x += 1;\\n                  break;\\n                default:\\n                break;\\n            }\\n            if(this.props.snake.running === false){\\n                clearInterval(running);\\n            }\\n            if (snake.head.x > 29 || snake.head.y > 29 || snake.head.x < 0 || snake.head.y < 0 || this.selfCollide()) {\\n              snake.lives -= 1;\\n              if (snake.lives <= 0) {\\n                snake.running = false;\\n                snake.alive = false;\\n                clearInterval(running);\\n              } else {\\n                alert(\\\"Revived. You have \\\" + snake.lives + \\\" lives remaining :)\\\");\\n                this.props.revive();\\n              }\\n            }\\n            var newCell = {\\n              x: snake.head.x,\\n              y: snake.head.y\\n            }\\n            snake.body.push(newCell);\\n            snake.tail.x = snake.body[0].x;\\n            snake.tail.y = snake.body[0].y;\\n            snake.body.splice(0,1);\\n            this.props.changeDirection(snake.direction);\\n        }, 200 / this.props.snake.speed);\\n      }\\n\\n    render(){\\n       return(\\n           <div id=\\\"Snake\\\">\\n            <KeyboardEventHandler\\n                  handleKeys={['left', 'up', 'right', 'down', 'w', 's', 'a', 'd']}\\n                  onKeyEvent={(key, e) => {\\n                    if ((key === 'up' || key === 'w') && (this.props.snake.direction === 'down' || this.props.snake.direction === 'up')) {\\n                      return;\\n                    }\\n                    if ((key === 'down' || key === 's') && (this.props.snake.direction === 'down' || this.props.snake.direction === 'up')) {\\n                      return;\\n                    }\\n                    if ((key === 'left' || key === 'a') && (this.props.snake.direction === 'left' || this.props.snake.direction === 'right')) {\\n                      return;\\n                    }\\n                    if ((key === 'right' || key === 'd') && (this.props.snake.direction === 'left' || this.props.snake.direction === 'right')) {\\n                      return;\\n                    }\\n                    if (this.props.snake.alive === false && this.props.snake.running === false){\\n                        this.props.endGame();\\n                    }\\n                    if (!this.props.snake.running && this.props.snake.alive){\\n                        this.run();\\n                    }\\n                    this.props.changeDirection(key);\\n                  }}/>\\n           </div>\\n       );\\n   }\\n}\\n\\nexport default Snake;\",\"import React from 'react';\\nimport Snake from './snake';\\nimport KeyboardEventHandler from 'react-keyboard-event-handler';\\nconst boardSize = 720;\\nconst cellSize = boardSize / 30;\\n\\nclass Board extends React.Component{\\n  constructor(props){\\n    super(props);\\n    this.state = {\\n      snake: {\\n        head: {\\n          x: 15,\\n          y: 15\\n        },\\n        tail: {\\n          x: 15,\\n          y: 15\\n        },\\n        direction: '',\\n        body: [{x:15,y:15}],\\n        running: false,\\n        alive: true,\\n        speed: 2,\\n        food: {},\\n        livefood: {},\\n        livefoodeaten: true,\\n        currentscore: 0,\\n        lives: 3\\n      },\\n      display: '0'\\n    }\\n  }\\n\\n    drawGrid() {\\n        const {ctx} = this.state;\\n        ctx.strokeStyle = 'rgba(255, 255, 255, 0.2)';\\n        ctx.fillStyle = '#9575cd';\\n        ctx.fillRect(0, 0, boardSize, boardSize) // fillrect is a function, so has ()\\n        for (var vertical = cellSize; vertical < boardSize; vertical += cellSize){\\n          ctx.beginPath();\\n          ctx.moveTo(vertical, 0);\\n          ctx.lineTo(vertical, boardSize);\\n          ctx.stroke();\\n        }\\n        for (var horizontal = cellSize; horizontal < boardSize; horizontal += cellSize){\\n          ctx.beginPath();\\n          ctx.moveTo(0, horizontal);\\n          ctx.lineTo(boardSize ,horizontal);\\n          ctx.stroke();\\n        }\\n    }\\n\\n    drawGrid2() {\\n      const {ctx} = this.state;\\n      ctx.strokeStyle = 'rgba(255, 255, 255, 0.01)'; // strokeStyle is a field, no ()\\n      ctx.fillStyle = '#9575cd';\\n      //ctx.fillRect(0, 0, boardSize, boardSize) // fillrect is a function, so has ()\\n      for (var vertical = cellSize; vertical < boardSize; vertical += cellSize){\\n        ctx.beginPath();\\n        ctx.moveTo(vertical, 0);\\n        ctx.lineTo(vertical, boardSize);\\n        ctx.stroke();\\n      }\\n      for (var horizontal = cellSize; horizontal < boardSize; horizontal += cellSize){\\n        ctx.beginPath();\\n        ctx.moveTo(0, horizontal);\\n        ctx.lineTo(boardSize, horizontal);\\n        ctx.stroke();\\n      }\\n    }\\n\\n    drawSnake(){\\n      const {ctx, snake} = this.state;\\n      ctx.fillStyle = '#795548';\\n      snake.body.forEach(cord => { // for loop through the snake's body, fill rect\\n        ctx.fillRect(cord.x * cellSize, cord.y * cellSize, 1 * cellSize, 1 * cellSize);\\n      })\\n    }\\n\\n    drawBoard(){\\n        const canvas = this.refs.gameBoard;\\n        this.setState({\\n          canvas: canvas,\\n          ctx: canvas.getContext('2d')\\n        }, function () {\\n          this.drawGrid();\\n          this.drawSnake();\\n          this.drawFood();\\n        })\\n    }\\n    \\n    changeDirection (direction) {\\n      let newState = Object.assign({}, this.state);\\n      if (direction === 'up' || direction === 'w'){\\n        newState.snake.direction = 'up';\\n      } else if (direction === 'down' || direction === 's'){\\n        newState.snake.direction = 'down';\\n      } else if (direction === 'left' || direction === 'a'){\\n        newState.snake.direction = 'left';\\n      } else if (direction === 'right' || direction === 'd'){\\n        newState.snake.direction = 'right';\\n      }\\n      this.setState(newState);\\n      this.canvasMoveSnake();\\n    }\\n\\n    canvasMoveSnake(){\\n      const {ctx, snake} = this.state;\\n      ctx.fillStyle = '#9575cd';\\n      this.drawRect(snake.tail.x,snake.tail.y,1,1);\\n      ctx.fillStyle = 'yellow';\\n      this.drawRect(snake.head.x,snake.head.y,1,1);\\n      if (snake.head.x === snake.food.x && snake.head.y === snake.food.y) {\\n        this.addBody();\\n        this.addscore();\\n        this.drawFood();\\n      }\\n      if (snake.head.x === snake.livefood.x && snake.head.y === snake.livefood.y) {\\n        this.addBody();\\n        this.addlive();\\n        snake.livefoodeaten = true;\\n      }\\n      if (snake.alive === false && snake.running === false){\\n        this.endGame();\\n      }\\n      this.drawGrid2();\\n    }\\n\\n    drawRect(x, y, l, h) {\\n      const {ctx} = this.state;\\n      ctx.fillRect(x * cellSize, y * cellSize, l * cellSize, h * cellSize);\\n    }\\n    \\n    componentDidMount () {\\n        this.drawBoard();\\n    } //as soon as the object is created, draw the board\\n\\n    addscore() {\\n      let newState = Object.assign({}, this.state);\\n      newState.snake.currentscore = newState.snake.currentscore + 1;\\n      newState.display = newState.snake.currentscore;\\n      this.setState(newState);\\n    }\\n\\n    addlive() {\\n      let newState = Object.assign({}, this.state);\\n      newState.snake.lives = newState.snake.lives + 1;\\n      this.setState(newState);\\n    }\\n\\n    drawFood () {\\n      const {ctx, snake} = this.state;\\n      var position = {\\n        x: Math.floor(Math.random() * 30),\\n        y: Math.floor(Math.random() * 30)\\n      }\\n      while(this.exists(position)){\\n        position.x = Math.floor(Math.random() * 30);\\n        position.y = Math.floor(Math.random() * 30);\\n      }\\n      snake.food = position;\\n      if (snake.livefoodeaten === true && \\n        (position.x % 7 === 0 && position.y % 7 === 0)){\\n        ctx.fillStyle = 'pink';\\n        this.drawliveFood();\\n      }\\n      this.setState({\\n        snake:snake\\n      })\\n      ctx.fillStyle = 'red';\\n      this.drawRect(position.x, position.y,1,1);\\n    }\\n    \\n    drawliveFood () {\\n      const {ctx, snake} = this.state;\\n      ctx.fillStyle = 'pink';\\n      var position = {\\n        x: Math.floor(Math.random() * 30),\\n        y: Math.floor(Math.random() * 30)\\n      }\\n      while(this.exists(position) && (\\n        position.x !== snake.food.x && position.y !== snake.food.y)){\\n        position.x = Math.floor(Math.random() * 30);\\n        position.y = Math.floor(Math.random() * 30);\\n      }\\n      snake.livefood = position;\\n      snake.foodeaten = false;\\n      this.setState({\\n        snake:snake\\n      })\\n      this.drawRect(position.x, position.y,1,1);\\n    }\\n\\n    // if the position is on the snake's body, return true, otherwise false.\\n    exists(position) {\\n      const {snake} = this.state;\\n      for (var i = 0; i < snake.currentscore; i++){\\n        var cord = {\\n          x: snake.body[i].x,\\n          y: snake.body[i].y\\n        }\\n        if (position.x === cord.x && position.y === cord.y){\\n          return true;\\n        }\\n      }\\n      return false;\\n    }\\n    \\n    addBody() {\\n      const {snake} = this.state;\\n      var newTail = {}\\n      switch(snake.direction){\\n        case 'up':\\n          newTail = {x: snake.tail.x, y: snake.tail.y - 1}\\n          break;\\n        case 'down':\\n          newTail = {x: snake.tail.x, y: snake.tail.y + 1}\\n          break;\\n        case 'left':\\n          newTail = {x: snake.tail.x - 1, y: snake.tail.y}\\n          break;\\n        case 'right':\\n          newTail = {x: snake.tail.x + 1, y: snake.tail.y}\\n          break;\\n        default:\\n          break;\\n      }\\n      snake.body.push(newTail)\\n      snake.tail = newTail;\\n    }\\n\\n    endGame() {\\n      const {ctx} = this.state;\\n      let newState = Object.assign({}, this.state);\\n      newState.snake.running = false;\\n      newState.snake.alive = false;\\n      this.setState(newState);\\n      //Horizonal Lines\\n      ctx.fillStyle = 'white';\\n      this.drawRect(5,9,4,1);\\n      this.drawRect(5,13,4,1);\\n      this.drawRect(11,9,2,1);\\n      this.drawRect(11,12,2,1);\\n      this.drawRect(22,9,3,1);\\n      this.drawRect(22,11,3,1);\\n      this.drawRect(22,13,3,1);\\n      this.drawRect(6,16,2,1);\\n      this.drawRect(6,20,2,1);\\n      this.drawRect(16,16,4,1);\\n      this.drawRect(16,18,4,1);\\n      this.drawRect(16,20,4,1);\\n      this.drawRect(21,16,4,1);\\n      this.drawRect(21,18,4,1);\\n      this.drawRect(23,20,2,1);\\n      //Vertical Lines\\n      this.drawRect(5,10,1,3);\\n      this.drawRect(10,10,1,4);\\n      this.drawRect(13,10,1,4);\\n      this.drawRect(15,9,1,5);\\n      this.drawRect(19,9,1,5);\\n      this.drawRect(21,9,1,5);\\n      this.drawRect(5,17,1,3);\\n      this.drawRect(8,17,1,3);\\n      this.drawRect(10,16,1,3);\\n      this.drawRect(14,16,1,3);\\n      this.drawRect(16,16,1,5);\\n      this.drawRect(21,16,1,5);\\n      this.drawRect(24,16,1,3);\\n      //Dots\\n      this.drawRect(7,11,1,1);\\n      this.drawRect(8,12,1,1);\\n      this.drawRect(16,10,1,1);\\n      this.drawRect(17,11,1,1);\\n      this.drawRect(18,10,1,1);\\n      this.drawRect(11,19,1,1);\\n      this.drawRect(12,20,1,1);\\n      this.drawRect(13,19,1,1);\\n      this.drawRect(22,19,1,1);\\n    }\\n\\n    resetBoard(){\\n      this.setState(({\\n          snake: {\\n            head: {\\n              x: 15,\\n              y: 15\\n            },\\n            tail: {\\n              x: 15,\\n              y: 15\\n            },\\n            direction: '',\\n            body: [{x:15,y:15}],\\n            running: false,\\n            alive: true,\\n            speed: 2,\\n            food: {},\\n            livefood: {},\\n            livefoodeaten: true,\\n            currentscore: 0,\\n            lives: 3\\n          },\\n          display: '0'\\n      }))\\n      this.drawBoard();\\n    }\\n\\n    revive(){\\n      let newState = Object.assign({}, this.state);\\n      newState.livefoodeaten = true;\\n      this.setState(newState);\\n      newState.snake.body.splice(0, newState.snake.body.length);\\n      for (var i = 0; i < newState.snake.currentscore; i++){\\n        var cord = {\\n          x: 15,\\n          y: 15\\n        }\\n        newState.snake.body.push(cord);\\n      }\\n      newState.snake.head.x = 15;\\n      newState.snake.head.y = 15;\\n      newState.snake.tail.x = 15;\\n      newState.snake.tail.x = 15;\\n      newState.alive = true;\\n      newState.running = false;\\n      this.setState(newState);\\n      this.drawBoard();\\n    }\\n\\n    speedUp(){\\n      let newState = Object.assign({}, this.state);\\n      newState.snake.speed = this.state.snake.speed + 0.3;        \\n      this.setState(newState);\\n    }\\n\\n    speedDown(){\\n      let newState = Object.assign({}, this.state);\\n      if (this.state.snake.speed >= 1.3) {\\n        newState.snake.speed = this.state.snake.speed - 0.3;\\n      } else {\\n        newState.snake.speed = this.state.snake.speed;\\n        alert(\\\"This is the lowest speed!\\\")\\n      }\\n      this.setState(newState);\\n    }\\n\\n    render() {\\n        return (\\n            <div id='gameContainer' className='container-fluid'>\\n              {this.state.display}\\n                <canvas id='gameBoard' ref=\\\"gameBoard\\\" width={boardSize} height={boardSize} />\\n                  <KeyboardEventHandler\\n                    handleKeys={['r', 'esc', '[', ']', 'space', 'z']}\\n                    onKeyEvent={(key, e) => {\\n                      if(key === 'r'){\\n                        this.resetBoard();\\n                      } else if (key === 'esc'){\\n                        this.endGame();\\n                      } else if (key === '['){\\n                        this.speedDown();\\n                      } else if (key === ']'){\\n                        this.speedUp();\\n                      } else if (key === 'space') {\\n                        alert(\\\"Paused! Click the button below to continue :)\\\");\\n                      } else if (key === 'z'){\\n                        this.addlive();\\n                      }\\n                    }}/>\\n                    <Snake snake={this.state.snake}\\n                    changeDirection={this.changeDirection.bind(this)}\\n                    endGame={this.endGame.bind(this)}\\n                    drawFood={this.drawFood.bind(this)}\\n                    revive={this.revive.bind(this)}\\n                  />\\n            </div>\\n        )\\n    }\\n}\\n\\nexport default Board;\",\"import React from 'react';\\nimport './App.css';\\nimport Board from './Board'\\nfunction App() {\\n  document.title = 'Snake Game Designed by Jason W';\\n  alert(\\\"Instructions: \\\\n \\\\\\n  1. Use arrows or WSAD to control the snake. \\\\n \\\\\\n  2. Use \\\\\\\"[\\\\\\\" and \\\\\\\"]\\\\\\\" to reduce or increase the speed of motion before the game starts. \\\\n \\\\\\n  3. Use \\\\\\\"r\\\\\\\" to restart the game. \\\\n \\\\\\n  4. Use space to pause the game. \\\\n \\\\\\n  5. You have 3 lives to start, and may earn more lives if you catch the pink food. \\\\nLet's GO!\\\")\\n  return (\\n    <div className=\\\"App\\\">\\n      <header className=\\\"App-header\\\">\\n        <Board />\\n      </header>\\n    </div>\\n  );\\n}\\n\\nexport default App;\\n\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read https://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport './index.css';\\nimport App from './App';\\nimport * as serviceWorker from './serviceWorker';\\n\\nReactDOM.render(<App />, document.getElementById('root'));\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: https://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{11:function(e,t,a){e.exports=a(22)},16:function(e,t,a){},17:function(e,t,a){},22:function(e,t,a){\"use strict\";a.r(t);var s=a(0),i=a.n(s),n=a(10),r=a.n(n),o=(a(16),a(17),a(1)),d=a(2),c=a(5),h=a(3),l=a(6),u=a(4),v=a.n(u),y=a(7),k=a.n(y),f=function(e){function t(){return Object(o.a)(this,t),Object(c.a)(this,Object(h.a)(t).apply(this,arguments))}return Object(l.a)(t,e),Object(d.a)(t,[{key:\"selfCollide\",value:function(){var e=this.props.snake;return e.body.some(function(t){return k.a.isEqual(t,e.head)})||k.a.isEqual(e.head,e.tail)}},{key:\"run\",value:function(){var e=this;this.props.snake.running=!0;var t=setInterval(function(){var a=e.props.snake;switch(a.direction){case\"up\":a.head.y-=1;break;case\"down\":a.head.y+=1;break;case\"left\":a.head.x-=1;break;case\"right\":a.head.x+=1}!1===e.props.snake.running&&clearInterval(t),(a.head.x>29||a.head.y>29||a.head.x<0||a.head.y<0||e.selfCollide())&&(a.lives-=1,a.lives<=0?(a.running=!1,a.alive=!1,clearInterval(t)):(alert(\"Revived. You have \"+a.lives+\" lives remaining :)\"),e.props.revive()));var s={x:a.head.x,y:a.head.y};a.body.push(s),a.tail.x=a.body[0].x,a.tail.y=a.body[0].y,a.body.splice(0,1),e.props.changeDirection(a.direction)},200/this.props.snake.speed)}},{key:\"render\",value:function(){var e=this;return i.a.createElement(\"div\",{id:\"Snake\"},i.a.createElement(v.a,{handleKeys:[\"left\",\"up\",\"right\",\"down\",\"w\",\"s\",\"a\",\"d\"],onKeyEvent:function(t,a){(\"up\"!==t&&\"w\"!==t||\"down\"!==e.props.snake.direction&&\"up\"!==e.props.snake.direction)&&(\"down\"!==t&&\"s\"!==t||\"down\"!==e.props.snake.direction&&\"up\"!==e.props.snake.direction)&&(\"left\"!==t&&\"a\"!==t||\"left\"!==e.props.snake.direction&&\"right\"!==e.props.snake.direction)&&(\"right\"!==t&&\"d\"!==t||\"left\"!==e.props.snake.direction&&\"right\"!==e.props.snake.direction)&&(!1===e.props.snake.alive&&!1===e.props.snake.running&&e.props.endGame(),!e.props.snake.running&&e.props.snake.alive&&e.run(),e.props.changeDirection(t))}}))}}]),t}(i.a.Component),p=function(e){function t(e){var a;return Object(o.a)(this,t),(a=Object(c.a)(this,Object(h.a)(t).call(this,e))).state={snake:{head:{x:15,y:15},tail:{x:15,y:15},direction:\"\",body:[{x:15,y:15}],running:!1,alive:!0,speed:2,food:{},livefood:{},livefoodeaten:!0,currentscore:0,lives:3},display:\"0\"},a}return Object(l.a)(t,e),Object(d.a)(t,[{key:\"drawGrid\",value:function(){var e=this.state.ctx;e.strokeStyle=\"rgba(255, 255, 255, 0.2)\",e.fillStyle=\"#9575cd\",e.fillRect(0,0,720,720);for(var t=24;t<720;t+=24)e.beginPath(),e.moveTo(t,0),e.lineTo(t,720),e.stroke();for(var a=24;a<720;a+=24)e.beginPath(),e.moveTo(0,a),e.lineTo(720,a),e.stroke()}},{key:\"drawGrid2\",value:function(){var e=this.state.ctx;e.strokeStyle=\"rgba(255, 255, 255, 0.01)\",e.fillStyle=\"#9575cd\";for(var t=24;t<720;t+=24)e.beginPath(),e.moveTo(t,0),e.lineTo(t,720),e.stroke();for(var a=24;a<720;a+=24)e.beginPath(),e.moveTo(0,a),e.lineTo(720,a),e.stroke()}},{key:\"drawSnake\",value:function(){var e=this.state,t=e.ctx,a=e.snake;t.fillStyle=\"#795548\",a.body.forEach(function(e){t.fillRect(24*e.x,24*e.y,24,24)})}},{key:\"drawBoard\",value:function(){var e=this.refs.gameBoard;this.setState({canvas:e,ctx:e.getContext(\"2d\")},function(){this.drawGrid(),this.drawSnake(),this.drawFood()})}},{key:\"changeDirection\",value:function(e){var t=Object.assign({},this.state);\"up\"===e||\"w\"===e?t.snake.direction=\"up\":\"down\"===e||\"s\"===e?t.snake.direction=\"down\":\"left\"===e||\"a\"===e?t.snake.direction=\"left\":\"right\"!==e&&\"d\"!==e||(t.snake.direction=\"right\"),this.setState(t),this.canvasMoveSnake()}},{key:\"canvasMoveSnake\",value:function(){var e=this.state,t=e.ctx,a=e.snake;t.fillStyle=\"#9575cd\",this.drawRect(a.tail.x,a.tail.y,1,1),t.fillStyle=\"yellow\",this.drawRect(a.head.x,a.head.y,1,1),a.head.x===a.food.x&&a.head.y===a.food.y&&(this.addBody(),this.addscore(),this.drawFood()),a.head.x===a.livefood.x&&a.head.y===a.livefood.y&&(this.addBody(),this.addlive(),a.livefoodeaten=!0),!1===a.alive&&!1===a.running&&this.endGame(),this.drawGrid2()}},{key:\"drawRect\",value:function(e,t,a,s){this.state.ctx.fillRect(24*e,24*t,24*a,24*s)}},{key:\"componentDidMount\",value:function(){this.drawBoard()}},{key:\"addscore\",value:function(){var e=Object.assign({},this.state);e.snake.currentscore=e.snake.currentscore+1,e.display=e.snake.currentscore,this.setState(e)}},{key:\"addlive\",value:function(){var e=Object.assign({},this.state);e.snake.lives=e.snake.lives+1,this.setState(e)}},{key:\"drawFood\",value:function(){for(var e=this.state,t=e.ctx,a=e.snake,s={x:Math.floor(30*Math.random()),y:Math.floor(30*Math.random())};this.exists(s);)s.x=Math.floor(30*Math.random()),s.y=Math.floor(30*Math.random());a.food=s,!0===a.livefoodeaten&&s.x%7===0&&s.y%7===0&&(t.fillStyle=\"pink\",this.drawliveFood()),this.setState({snake:a}),t.fillStyle=\"red\",this.drawRect(s.x,s.y,1,1)}},{key:\"drawliveFood\",value:function(){var e=this.state,t=e.ctx,a=e.snake;t.fillStyle=\"pink\";for(var s={x:Math.floor(30*Math.random()),y:Math.floor(30*Math.random())};this.exists(s)&&s.x!==a.food.x&&s.y!==a.food.y;)s.x=Math.floor(30*Math.random()),s.y=Math.floor(30*Math.random());a.livefood=s,a.foodeaten=!1,this.setState({snake:a}),this.drawRect(s.x,s.y,1,1)}},{key:\"exists\",value:function(e){for(var t=this.state.snake,a=0;a<t.currentscore;a++){var s={x:t.body[a].x,y:t.body[a].y};if(e.x===s.x&&e.y===s.y)return!0}return!1}},{key:\"addBody\",value:function(){var e=this.state.snake,t={};switch(e.direction){case\"up\":t={x:e.tail.x,y:e.tail.y-1};break;case\"down\":t={x:e.tail.x,y:e.tail.y+1};break;case\"left\":t={x:e.tail.x-1,y:e.tail.y};break;case\"right\":t={x:e.tail.x+1,y:e.tail.y}}e.body.push(t),e.tail=t}},{key:\"endGame\",value:function(){var e=this.state.ctx,t=Object.assign({},this.state);t.snake.running=!1,t.snake.alive=!1,this.setState(t),e.fillStyle=\"white\",this.drawRect(5,9,4,1),this.drawRect(5,13,4,1),this.drawRect(11,9,2,1),this.drawRect(11,12,2,1),this.drawRect(22,9,3,1),this.drawRect(22,11,3,1),this.drawRect(22,13,3,1),this.drawRect(6,16,2,1),this.drawRect(6,20,2,1),this.drawRect(16,16,4,1),this.drawRect(16,18,4,1),this.drawRect(16,20,4,1),this.drawRect(21,16,4,1),this.drawRect(21,18,4,1),this.drawRect(23,20,2,1),this.drawRect(5,10,1,3),this.drawRect(10,10,1,4),this.drawRect(13,10,1,4),this.drawRect(15,9,1,5),this.drawRect(19,9,1,5),this.drawRect(21,9,1,5),this.drawRect(5,17,1,3),this.drawRect(8,17,1,3),this.drawRect(10,16,1,3),this.drawRect(14,16,1,3),this.drawRect(16,16,1,5),this.drawRect(21,16,1,5),this.drawRect(24,16,1,3),this.drawRect(7,11,1,1),this.drawRect(8,12,1,1),this.drawRect(16,10,1,1),this.drawRect(17,11,1,1),this.drawRect(18,10,1,1),this.drawRect(11,19,1,1),this.drawRect(12,20,1,1),this.drawRect(13,19,1,1),this.drawRect(22,19,1,1)}},{key:\"resetBoard\",value:function(){this.setState({snake:{head:{x:15,y:15},tail:{x:15,y:15},direction:\"\",body:[{x:15,y:15}],running:!1,alive:!0,speed:2,food:{},livefood:{},livefoodeaten:!0,currentscore:0,lives:3},display:\"0\"}),this.drawBoard()}},{key:\"revive\",value:function(){var e=Object.assign({},this.state);e.livefoodeaten=!0,this.setState(e),e.snake.body.splice(0,e.snake.body.length);for(var t=0;t<e.snake.currentscore;t++){e.snake.body.push({x:15,y:15})}e.snake.head.x=15,e.snake.head.y=15,e.snake.tail.x=15,e.snake.tail.x=15,e.alive=!0,e.running=!1,this.setState(e),this.drawBoard()}},{key:\"speedUp\",value:function(){var e=Object.assign({},this.state);e.snake.speed=this.state.snake.speed+.3,this.setState(e)}},{key:\"speedDown\",value:function(){var e=Object.assign({},this.state);this.state.snake.speed>=1.3?e.snake.speed=this.state.snake.speed-.3:(e.snake.speed=this.state.snake.speed,alert(\"This is the lowest speed!\")),this.setState(e)}},{key:\"render\",value:function(){var e=this;return i.a.createElement(\"div\",{id:\"gameContainer\",className:\"container-fluid\"},this.state.display,i.a.createElement(\"canvas\",{id:\"gameBoard\",ref:\"gameBoard\",width:720,height:720}),i.a.createElement(v.a,{handleKeys:[\"r\",\"esc\",\"[\",\"]\",\"space\",\"z\"],onKeyEvent:function(t,a){\"r\"===t?e.resetBoard():\"esc\"===t?e.endGame():\"[\"===t?e.speedDown():\"]\"===t?e.speedUp():\"space\"===t?alert(\"Paused! Click the button below to continue :)\"):\"z\"===t&&e.addlive()}}),i.a.createElement(f,{snake:this.state.snake,changeDirection:this.changeDirection.bind(this),endGame:this.endGame.bind(this),drawFood:this.drawFood.bind(this),revive:this.revive.bind(this)}))}}]),t}(i.a.Component);var w=function(){return document.title=\"Snake Game Designed by Jason W\",alert('Instructions: \\n   1. Use arrows or WSAD to control the snake. \\n   2. Use \"[\" and \"]\" to reduce or increase the speed of motion before the game starts. \\n   3. Use \"r\" to restart the game. \\n   4. Use space to pause the game. \\n   5. You have 3 lives to start, and may earn more lives if you catch the pink food. \\nLet\\'s GO!'),i.a.createElement(\"div\",{className:\"App\"},i.a.createElement(\"header\",{className:\"App-header\"},i.a.createElement(p,null)))};Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));r.a.render(i.a.createElement(w,null),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})}},[[11,1,2]]]);","extractedComments":[]}